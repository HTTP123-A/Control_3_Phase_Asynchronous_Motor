
STM32F411RET6_SPINDLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b40  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003cd8  08003cd8  00013cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cf0  08003cf0  00020c10  2**0
                  CONTENTS
  4 .ARM          00000008  08003cf0  08003cf0  00013cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003cf8  08003cf8  00020c10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cf8  08003cf8  00013cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cfc  08003cfc  00013cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000c10  20000000  08003d00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  20000c10  08004910  00020c10  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000dc0  08004910  00020dc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020c10  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b1cf  00000000  00000000  00020c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a4a  00000000  00000000  0002be0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b20  00000000  00000000  0002d860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a58  00000000  00000000  0002e380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000165b3  00000000  00000000  0002edd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bf1e  00000000  00000000  0004538b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009382c  00000000  00000000  000512a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e4ad5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e80  00000000  00000000  000e4b28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000c10 	.word	0x20000c10
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003cc0 	.word	0x08003cc0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000c14 	.word	0x20000c14
 80001d4:	08003cc0 	.word	0x08003cc0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <Update_TIM1_ARR>:
static void MX_DMA_Init(void);
static void MX_ADC1_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */
void Update_TIM1_ARR(TIM_HandleTypeDef* htim, uint16_t new_arr) {
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	460b      	mov	r3, r1
 80004e6:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_AUTORELOAD(htim, new_arr);
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	887a      	ldrh	r2, [r7, #2]
 80004ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80004f0:	887a      	ldrh	r2, [r7, #2]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	60da      	str	r2, [r3, #12]

	if (__HAL_TIM_GET_COUNTER(htim) >= __HAL_TIM_GET_AUTORELOAD(htim))
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000502:	429a      	cmp	r2, r3
 8000504:	d307      	bcc.n	8000516 <Update_TIM1_ARR+0x3a>
		htim->Instance->EGR |= TIM_EGR_UG;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	695a      	ldr	r2, [r3, #20]
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	f042 0201 	orr.w	r2, r2, #1
 8000514:	615a      	str	r2, [r3, #20]
}
 8000516:	bf00      	nop
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
	...

08000524 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a41      	ldr	r2, [pc, #260]	; (8000638 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000532:	4293      	cmp	r3, r2
 8000534:	d150      	bne.n	80005d8 <HAL_TIM_PeriodElapsedCallback+0xb4>
	{
		TIM2->CCR1 = Sine_LUT_P1[index_LUT]*Soft_Start;
 8000536:	4b41      	ldr	r3, [pc, #260]	; (800063c <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000538:	881b      	ldrh	r3, [r3, #0]
 800053a:	461a      	mov	r2, r3
 800053c:	4b40      	ldr	r3, [pc, #256]	; (8000640 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800053e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000542:	ee07 3a90 	vmov	s15, r3
 8000546:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800054a:	4b3e      	ldr	r3, [pc, #248]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800054c:	edd3 7a00 	vldr	s15, [r3]
 8000550:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000554:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000558:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800055c:	ee17 2a90 	vmov	r2, s15
 8000560:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR2 = Sine_LUT_P2[index_LUT]*Soft_Start;
 8000562:	4b36      	ldr	r3, [pc, #216]	; (800063c <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000564:	881b      	ldrh	r3, [r3, #0]
 8000566:	461a      	mov	r2, r3
 8000568:	4b37      	ldr	r3, [pc, #220]	; (8000648 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800056a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800056e:	ee07 3a90 	vmov	s15, r3
 8000572:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000576:	4b33      	ldr	r3, [pc, #204]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000578:	edd3 7a00 	vldr	s15, [r3]
 800057c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000584:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000588:	ee17 2a90 	vmov	r2, s15
 800058c:	639a      	str	r2, [r3, #56]	; 0x38
		TIM2->CCR3 = Sine_LUT_P3[index_LUT]*Soft_Start;
 800058e:	4b2b      	ldr	r3, [pc, #172]	; (800063c <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000590:	881b      	ldrh	r3, [r3, #0]
 8000592:	461a      	mov	r2, r3
 8000594:	4b2d      	ldr	r3, [pc, #180]	; (800064c <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000596:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800059a:	ee07 3a90 	vmov	s15, r3
 800059e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80005a2:	4b28      	ldr	r3, [pc, #160]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80005a4:	edd3 7a00 	vldr	s15, [r3]
 80005a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005b4:	ee17 2a90 	vmov	r2, s15
 80005b8:	63da      	str	r2, [r3, #60]	; 0x3c
		//__HAL_TIM_SetCompare();
		if (index_LUT < 512) index_LUT++;
 80005ba:	4b20      	ldr	r3, [pc, #128]	; (800063c <HAL_TIM_PeriodElapsedCallback+0x118>)
 80005bc:	881b      	ldrh	r3, [r3, #0]
 80005be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80005c2:	d206      	bcs.n	80005d2 <HAL_TIM_PeriodElapsedCallback+0xae>
 80005c4:	4b1d      	ldr	r3, [pc, #116]	; (800063c <HAL_TIM_PeriodElapsedCallback+0x118>)
 80005c6:	881b      	ldrh	r3, [r3, #0]
 80005c8:	3301      	adds	r3, #1
 80005ca:	b29a      	uxth	r2, r3
 80005cc:	4b1b      	ldr	r3, [pc, #108]	; (800063c <HAL_TIM_PeriodElapsedCallback+0x118>)
 80005ce:	801a      	strh	r2, [r3, #0]
 80005d0:	e002      	b.n	80005d8 <HAL_TIM_PeriodElapsedCallback+0xb4>
		else index_LUT = 0;
 80005d2:	4b1a      	ldr	r3, [pc, #104]	; (800063c <HAL_TIM_PeriodElapsedCallback+0x118>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	801a      	strh	r2, [r3, #0]
	}
	if (htim->Instance == TIM3)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a1c      	ldr	r2, [pc, #112]	; (8000650 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d126      	bne.n	8000630 <HAL_TIM_PeriodElapsedCallback+0x10c>
	{
		HAL_TIM_Base_Stop_IT(&htim1);
 80005e2:	481c      	ldr	r0, [pc, #112]	; (8000654 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80005e4:	f002 fc00 	bl	8002de8 <HAL_TIM_Base_Stop_IT>
		F_SINE = (uint32_t) 100 + ADC_Value*400/4095;
 80005e8:	4b1b      	ldr	r3, [pc, #108]	; (8000658 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80005f0:	fb03 f202 	mul.w	r2, r3, r2
 80005f4:	4b19      	ldr	r3, [pc, #100]	; (800065c <HAL_TIM_PeriodElapsedCallback+0x138>)
 80005f6:	fba3 1302 	umull	r1, r3, r3, r2
 80005fa:	1ad2      	subs	r2, r2, r3
 80005fc:	0852      	lsrs	r2, r2, #1
 80005fe:	4413      	add	r3, r2
 8000600:	0adb      	lsrs	r3, r3, #11
 8000602:	3364      	adds	r3, #100	; 0x64
 8000604:	4a16      	ldr	r2, [pc, #88]	; (8000660 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000606:	6013      	str	r3, [r2, #0]
		TIM1_Tick  = TIMER1_CLk / (NS*F_SINE);
 8000608:	4b15      	ldr	r3, [pc, #84]	; (8000660 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	025b      	lsls	r3, r3, #9
 800060e:	4a15      	ldr	r2, [pc, #84]	; (8000664 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000610:	fbb2 f3f3 	udiv	r3, r2, r3
 8000614:	4a14      	ldr	r2, [pc, #80]	; (8000668 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000616:	6013      	str	r3, [r2, #0]
		Update_TIM1_ARR(&htim1, (uint16_t) TIM1_Tick - 1);
 8000618:	4b13      	ldr	r3, [pc, #76]	; (8000668 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	b29b      	uxth	r3, r3
 800061e:	3b01      	subs	r3, #1
 8000620:	b29b      	uxth	r3, r3
 8000622:	4619      	mov	r1, r3
 8000624:	480b      	ldr	r0, [pc, #44]	; (8000654 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000626:	f7ff ff59 	bl	80004dc <Update_TIM1_ARR>
		HAL_TIM_Base_Start_IT(&htim1);
 800062a:	480a      	ldr	r0, [pc, #40]	; (8000654 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800062c:	f002 fb7a 	bl	8002d24 <HAL_TIM_Base_Start_IT>
	}
}
 8000630:	bf00      	nop
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40010000 	.word	0x40010000
 800063c:	20000db4 	.word	0x20000db4
 8000640:	20000000 	.word	0x20000000
 8000644:	20000db8 	.word	0x20000db8
 8000648:	20000400 	.word	0x20000400
 800064c:	20000800 	.word	0x20000800
 8000650:	40000400 	.word	0x40000400
 8000654:	20000cd4 	.word	0x20000cd4
 8000658:	20000dac 	.word	0x20000dac
 800065c:	00100101 	.word	0x00100101
 8000660:	20000c00 	.word	0x20000c00
 8000664:	05f5e100 	.word	0x05f5e100
 8000668:	20000db0 	.word	0x20000db0

0800066c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000670:	f000 fc2a 	bl	8000ec8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000674:	f000 f84c 	bl	8000710 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000678:	f000 fa50 	bl	8000b1c <MX_GPIO_Init>
  MX_TIM1_Init();
 800067c:	f000 f904 	bl	8000888 <MX_TIM1_Init>
  MX_DMA_Init();
 8000680:	f000 fa2c 	bl	8000adc <MX_DMA_Init>
  MX_ADC1_Init();
 8000684:	f000 f8ae 	bl	80007e4 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000688:	f000 f94e 	bl	8000928 <MX_TIM2_Init>
  MX_TIM3_Init();
 800068c:	f000 f9d8 	bl	8000a40 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  TIM1_Tick  = TIMER1_CLk / (NS*F_SINE);
 8000690:	4b16      	ldr	r3, [pc, #88]	; (80006ec <main+0x80>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	025b      	lsls	r3, r3, #9
 8000696:	4a16      	ldr	r2, [pc, #88]	; (80006f0 <main+0x84>)
 8000698:	fbb2 f3f3 	udiv	r3, r2, r3
 800069c:	4a15      	ldr	r2, [pc, #84]	; (80006f4 <main+0x88>)
 800069e:	6013      	str	r3, [r2, #0]
  Soft_Start = 1.0;
 80006a0:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <main+0x8c>)
 80006a2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80006a6:	601a      	str	r2, [r3, #0]
  Update_TIM1_ARR(&htim1, (uint16_t) TIM1_Tick - 1);
 80006a8:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <main+0x88>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	b29b      	uxth	r3, r3
 80006ae:	3b01      	subs	r3, #1
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	4619      	mov	r1, r3
 80006b4:	4811      	ldr	r0, [pc, #68]	; (80006fc <main+0x90>)
 80006b6:	f7ff ff11 	bl	80004dc <Update_TIM1_ARR>
  HAL_TIM_Base_Start_IT(&htim1);
 80006ba:	4810      	ldr	r0, [pc, #64]	; (80006fc <main+0x90>)
 80006bc:	f002 fb32 	bl	8002d24 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80006c0:	480f      	ldr	r0, [pc, #60]	; (8000700 <main+0x94>)
 80006c2:	f002 fb2f 	bl	8002d24 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80006c6:	2100      	movs	r1, #0
 80006c8:	480e      	ldr	r0, [pc, #56]	; (8000704 <main+0x98>)
 80006ca:	f002 fc15 	bl	8002ef8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80006ce:	2104      	movs	r1, #4
 80006d0:	480c      	ldr	r0, [pc, #48]	; (8000704 <main+0x98>)
 80006d2:	f002 fc11 	bl	8002ef8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80006d6:	2108      	movs	r1, #8
 80006d8:	480a      	ldr	r0, [pc, #40]	; (8000704 <main+0x98>)
 80006da:	f002 fc0d 	bl	8002ef8 <HAL_TIM_PWM_Start>
  HAL_ADC_Start_DMA(&hadc1, &ADC_Value, 1);
 80006de:	2201      	movs	r2, #1
 80006e0:	4909      	ldr	r1, [pc, #36]	; (8000708 <main+0x9c>)
 80006e2:	480a      	ldr	r0, [pc, #40]	; (800070c <main+0xa0>)
 80006e4:	f000 fca6 	bl	8001034 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <main+0x7c>
 80006ea:	bf00      	nop
 80006ec:	20000c00 	.word	0x20000c00
 80006f0:	05f5e100 	.word	0x05f5e100
 80006f4:	20000db0 	.word	0x20000db0
 80006f8:	20000db8 	.word	0x20000db8
 80006fc:	20000cd4 	.word	0x20000cd4
 8000700:	20000d64 	.word	0x20000d64
 8000704:	20000d1c 	.word	0x20000d1c
 8000708:	20000dac 	.word	0x20000dac
 800070c:	20000c2c 	.word	0x20000c2c

08000710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b094      	sub	sp, #80	; 0x50
 8000714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000716:	f107 0320 	add.w	r3, r7, #32
 800071a:	2230      	movs	r2, #48	; 0x30
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f003 fac6 	bl	8003cb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000724:	f107 030c 	add.w	r3, r7, #12
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000734:	2300      	movs	r3, #0
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	4b28      	ldr	r3, [pc, #160]	; (80007dc <SystemClock_Config+0xcc>)
 800073a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073c:	4a27      	ldr	r2, [pc, #156]	; (80007dc <SystemClock_Config+0xcc>)
 800073e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000742:	6413      	str	r3, [r2, #64]	; 0x40
 8000744:	4b25      	ldr	r3, [pc, #148]	; (80007dc <SystemClock_Config+0xcc>)
 8000746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074c:	60bb      	str	r3, [r7, #8]
 800074e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000750:	2300      	movs	r3, #0
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	4b22      	ldr	r3, [pc, #136]	; (80007e0 <SystemClock_Config+0xd0>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a21      	ldr	r2, [pc, #132]	; (80007e0 <SystemClock_Config+0xd0>)
 800075a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800075e:	6013      	str	r3, [r2, #0]
 8000760:	4b1f      	ldr	r3, [pc, #124]	; (80007e0 <SystemClock_Config+0xd0>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800076c:	2302      	movs	r3, #2
 800076e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000770:	2301      	movs	r3, #1
 8000772:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000774:	2310      	movs	r3, #16
 8000776:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000778:	2302      	movs	r3, #2
 800077a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800077c:	2300      	movs	r3, #0
 800077e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000780:	2310      	movs	r3, #16
 8000782:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000784:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000788:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800078a:	2304      	movs	r3, #4
 800078c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800078e:	2304      	movs	r3, #4
 8000790:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000792:	f107 0320 	add.w	r3, r7, #32
 8000796:	4618      	mov	r0, r3
 8000798:	f001 fe10 	bl	80023bc <HAL_RCC_OscConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007a2:	f000 f9d5 	bl	8000b50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a6:	230f      	movs	r3, #15
 80007a8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007aa:	2302      	movs	r3, #2
 80007ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007bc:	f107 030c 	add.w	r3, r7, #12
 80007c0:	2103      	movs	r1, #3
 80007c2:	4618      	mov	r0, r3
 80007c4:	f002 f872 	bl	80028ac <HAL_RCC_ClockConfig>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007ce:	f000 f9bf 	bl	8000b50 <Error_Handler>
  }
}
 80007d2:	bf00      	nop
 80007d4:	3750      	adds	r7, #80	; 0x50
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40007000 	.word	0x40007000

080007e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ea:	463b      	mov	r3, r7
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007f6:	4b21      	ldr	r3, [pc, #132]	; (800087c <MX_ADC1_Init+0x98>)
 80007f8:	4a21      	ldr	r2, [pc, #132]	; (8000880 <MX_ADC1_Init+0x9c>)
 80007fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007fc:	4b1f      	ldr	r3, [pc, #124]	; (800087c <MX_ADC1_Init+0x98>)
 80007fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000802:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000804:	4b1d      	ldr	r3, [pc, #116]	; (800087c <MX_ADC1_Init+0x98>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800080a:	4b1c      	ldr	r3, [pc, #112]	; (800087c <MX_ADC1_Init+0x98>)
 800080c:	2201      	movs	r2, #1
 800080e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000810:	4b1a      	ldr	r3, [pc, #104]	; (800087c <MX_ADC1_Init+0x98>)
 8000812:	2201      	movs	r2, #1
 8000814:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000816:	4b19      	ldr	r3, [pc, #100]	; (800087c <MX_ADC1_Init+0x98>)
 8000818:	2200      	movs	r2, #0
 800081a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800081e:	4b17      	ldr	r3, [pc, #92]	; (800087c <MX_ADC1_Init+0x98>)
 8000820:	2200      	movs	r2, #0
 8000822:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000824:	4b15      	ldr	r3, [pc, #84]	; (800087c <MX_ADC1_Init+0x98>)
 8000826:	4a17      	ldr	r2, [pc, #92]	; (8000884 <MX_ADC1_Init+0xa0>)
 8000828:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800082a:	4b14      	ldr	r3, [pc, #80]	; (800087c <MX_ADC1_Init+0x98>)
 800082c:	2200      	movs	r2, #0
 800082e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <MX_ADC1_Init+0x98>)
 8000832:	2201      	movs	r2, #1
 8000834:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_ADC1_Init+0x98>)
 8000838:	2201      	movs	r2, #1
 800083a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800083e:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_ADC1_Init+0x98>)
 8000840:	2200      	movs	r2, #0
 8000842:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000844:	480d      	ldr	r0, [pc, #52]	; (800087c <MX_ADC1_Init+0x98>)
 8000846:	f000 fbb1 	bl	8000fac <HAL_ADC_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000850:	f000 f97e 	bl	8000b50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000854:	2300      	movs	r3, #0
 8000856:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000858:	2301      	movs	r3, #1
 800085a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 800085c:	2304      	movs	r3, #4
 800085e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000860:	463b      	mov	r3, r7
 8000862:	4619      	mov	r1, r3
 8000864:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_ADC1_Init+0x98>)
 8000866:	f000 fcf3 	bl	8001250 <HAL_ADC_ConfigChannel>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000870:	f000 f96e 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000874:	bf00      	nop
 8000876:	3710      	adds	r7, #16
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000c2c 	.word	0x20000c2c
 8000880:	40012000 	.word	0x40012000
 8000884:	0f000001 	.word	0x0f000001

08000888 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b086      	sub	sp, #24
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800088e:	f107 0308 	add.w	r3, r7, #8
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800089c:	463b      	mov	r3, r7
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008a4:	4b1e      	ldr	r3, [pc, #120]	; (8000920 <MX_TIM1_Init+0x98>)
 80008a6:	4a1f      	ldr	r2, [pc, #124]	; (8000924 <MX_TIM1_Init+0x9c>)
 80008a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008aa:	4b1d      	ldr	r3, [pc, #116]	; (8000920 <MX_TIM1_Init+0x98>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b0:	4b1b      	ldr	r3, [pc, #108]	; (8000920 <MX_TIM1_Init+0x98>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2;
 80008b6:	4b1a      	ldr	r3, [pc, #104]	; (8000920 <MX_TIM1_Init+0x98>)
 80008b8:	2202      	movs	r2, #2
 80008ba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008bc:	4b18      	ldr	r3, [pc, #96]	; (8000920 <MX_TIM1_Init+0x98>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008c2:	4b17      	ldr	r3, [pc, #92]	; (8000920 <MX_TIM1_Init+0x98>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c8:	4b15      	ldr	r3, [pc, #84]	; (8000920 <MX_TIM1_Init+0x98>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008ce:	4814      	ldr	r0, [pc, #80]	; (8000920 <MX_TIM1_Init+0x98>)
 80008d0:	f002 f9d8 	bl	8002c84 <HAL_TIM_Base_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 80008da:	f000 f939 	bl	8000b50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008e4:	f107 0308 	add.w	r3, r7, #8
 80008e8:	4619      	mov	r1, r3
 80008ea:	480d      	ldr	r0, [pc, #52]	; (8000920 <MX_TIM1_Init+0x98>)
 80008ec:	f002 fd7e 	bl	80033ec <HAL_TIM_ConfigClockSource>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 80008f6:	f000 f92b 	bl	8000b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008fa:	2300      	movs	r3, #0
 80008fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008fe:	2300      	movs	r3, #0
 8000900:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000902:	463b      	mov	r3, r7
 8000904:	4619      	mov	r1, r3
 8000906:	4806      	ldr	r0, [pc, #24]	; (8000920 <MX_TIM1_Init+0x98>)
 8000908:	f003 f92c 	bl	8003b64 <HAL_TIMEx_MasterConfigSynchronization>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000912:	f000 f91d 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	3718      	adds	r7, #24
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000cd4 	.word	0x20000cd4
 8000924:	40010000 	.word	0x40010000

08000928 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08e      	sub	sp, #56	; 0x38
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800092e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800093c:	f107 0320 	add.w	r3, r7, #32
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]
 8000954:	615a      	str	r2, [r3, #20]
 8000956:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000958:	4b38      	ldr	r3, [pc, #224]	; (8000a3c <MX_TIM2_Init+0x114>)
 800095a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800095e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000960:	4b36      	ldr	r3, [pc, #216]	; (8000a3c <MX_TIM2_Init+0x114>)
 8000962:	2200      	movs	r2, #0
 8000964:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000966:	4b35      	ldr	r3, [pc, #212]	; (8000a3c <MX_TIM2_Init+0x114>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1023;
 800096c:	4b33      	ldr	r3, [pc, #204]	; (8000a3c <MX_TIM2_Init+0x114>)
 800096e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000972:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000974:	4b31      	ldr	r3, [pc, #196]	; (8000a3c <MX_TIM2_Init+0x114>)
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800097a:	4b30      	ldr	r3, [pc, #192]	; (8000a3c <MX_TIM2_Init+0x114>)
 800097c:	2280      	movs	r2, #128	; 0x80
 800097e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000980:	482e      	ldr	r0, [pc, #184]	; (8000a3c <MX_TIM2_Init+0x114>)
 8000982:	f002 f97f 	bl	8002c84 <HAL_TIM_Base_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800098c:	f000 f8e0 	bl	8000b50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000990:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000996:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800099a:	4619      	mov	r1, r3
 800099c:	4827      	ldr	r0, [pc, #156]	; (8000a3c <MX_TIM2_Init+0x114>)
 800099e:	f002 fd25 	bl	80033ec <HAL_TIM_ConfigClockSource>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80009a8:	f000 f8d2 	bl	8000b50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009ac:	4823      	ldr	r0, [pc, #140]	; (8000a3c <MX_TIM2_Init+0x114>)
 80009ae:	f002 fa4a 	bl	8002e46 <HAL_TIM_PWM_Init>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80009b8:	f000 f8ca 	bl	8000b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009bc:	2300      	movs	r3, #0
 80009be:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009c4:	f107 0320 	add.w	r3, r7, #32
 80009c8:	4619      	mov	r1, r3
 80009ca:	481c      	ldr	r0, [pc, #112]	; (8000a3c <MX_TIM2_Init+0x114>)
 80009cc:	f003 f8ca 	bl	8003b64 <HAL_TIMEx_MasterConfigSynchronization>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80009d6:	f000 f8bb 	bl	8000b50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009da:	2360      	movs	r3, #96	; 0x60
 80009dc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009e6:	2300      	movs	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	2200      	movs	r2, #0
 80009ee:	4619      	mov	r1, r3
 80009f0:	4812      	ldr	r0, [pc, #72]	; (8000a3c <MX_TIM2_Init+0x114>)
 80009f2:	f002 fc39 	bl	8003268 <HAL_TIM_PWM_ConfigChannel>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80009fc:	f000 f8a8 	bl	8000b50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	2204      	movs	r2, #4
 8000a04:	4619      	mov	r1, r3
 8000a06:	480d      	ldr	r0, [pc, #52]	; (8000a3c <MX_TIM2_Init+0x114>)
 8000a08:	f002 fc2e 	bl	8003268 <HAL_TIM_PWM_ConfigChannel>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000a12:	f000 f89d 	bl	8000b50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	2208      	movs	r2, #8
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4807      	ldr	r0, [pc, #28]	; (8000a3c <MX_TIM2_Init+0x114>)
 8000a1e:	f002 fc23 	bl	8003268 <HAL_TIM_PWM_ConfigChannel>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8000a28:	f000 f892 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a2c:	4803      	ldr	r0, [pc, #12]	; (8000a3c <MX_TIM2_Init+0x114>)
 8000a2e:	f000 f98f 	bl	8000d50 <HAL_TIM_MspPostInit>

}
 8000a32:	bf00      	nop
 8000a34:	3738      	adds	r7, #56	; 0x38
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000d1c 	.word	0x20000d1c

08000a40 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a46:	f107 0308 	add.w	r3, r7, #8
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a54:	463b      	mov	r3, r7
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a5c:	4b1d      	ldr	r3, [pc, #116]	; (8000ad4 <MX_TIM3_Init+0x94>)
 8000a5e:	4a1e      	ldr	r2, [pc, #120]	; (8000ad8 <MX_TIM3_Init+0x98>)
 8000a60:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000;
 8000a62:	4b1c      	ldr	r3, [pc, #112]	; (8000ad4 <MX_TIM3_Init+0x94>)
 8000a64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a68:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a6a:	4b1a      	ldr	r3, [pc, #104]	; (8000ad4 <MX_TIM3_Init+0x94>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000;
 8000a70:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <MX_TIM3_Init+0x94>)
 8000a72:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000a76:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a78:	4b16      	ldr	r3, [pc, #88]	; (8000ad4 <MX_TIM3_Init+0x94>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a7e:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <MX_TIM3_Init+0x94>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a84:	4813      	ldr	r0, [pc, #76]	; (8000ad4 <MX_TIM3_Init+0x94>)
 8000a86:	f002 f8fd 	bl	8002c84 <HAL_TIM_Base_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000a90:	f000 f85e 	bl	8000b50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a9a:	f107 0308 	add.w	r3, r7, #8
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	480c      	ldr	r0, [pc, #48]	; (8000ad4 <MX_TIM3_Init+0x94>)
 8000aa2:	f002 fca3 	bl	80033ec <HAL_TIM_ConfigClockSource>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000aac:	f000 f850 	bl	8000b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ab8:	463b      	mov	r3, r7
 8000aba:	4619      	mov	r1, r3
 8000abc:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_TIM3_Init+0x94>)
 8000abe:	f003 f851 	bl	8003b64 <HAL_TIMEx_MasterConfigSynchronization>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000ac8:	f000 f842 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000acc:	bf00      	nop
 8000ace:	3718      	adds	r7, #24
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20000d64 	.word	0x20000d64
 8000ad8:	40000400 	.word	0x40000400

08000adc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <MX_DMA_Init+0x3c>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a0b      	ldr	r2, [pc, #44]	; (8000b18 <MX_DMA_Init+0x3c>)
 8000aec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <MX_DMA_Init+0x3c>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2100      	movs	r1, #0
 8000b02:	2038      	movs	r0, #56	; 0x38
 8000b04:	f000 ff2f 	bl	8001966 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000b08:	2038      	movs	r0, #56	; 0x38
 8000b0a:	f000 ff48 	bl	800199e <HAL_NVIC_EnableIRQ>

}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40023800 	.word	0x40023800

08000b1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <MX_GPIO_Init+0x30>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a08      	ldr	r2, [pc, #32]	; (8000b4c <MX_GPIO_Init+0x30>)
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <MX_GPIO_Init+0x30>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]

}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	40023800 	.word	0x40023800

08000b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b54:	b672      	cpsid	i
}
 8000b56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <Error_Handler+0x8>
	...

08000b5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	607b      	str	r3, [r7, #4]
 8000b66:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <HAL_MspInit+0x4c>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6a:	4a0f      	ldr	r2, [pc, #60]	; (8000ba8 <HAL_MspInit+0x4c>)
 8000b6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b70:	6453      	str	r3, [r2, #68]	; 0x44
 8000b72:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <HAL_MspInit+0x4c>)
 8000b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	603b      	str	r3, [r7, #0]
 8000b82:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <HAL_MspInit+0x4c>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	4a08      	ldr	r2, [pc, #32]	; (8000ba8 <HAL_MspInit+0x4c>)
 8000b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8e:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <HAL_MspInit+0x4c>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b96:	603b      	str	r3, [r7, #0]
 8000b98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	40023800 	.word	0x40023800

08000bac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08a      	sub	sp, #40	; 0x28
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a2f      	ldr	r2, [pc, #188]	; (8000c88 <HAL_ADC_MspInit+0xdc>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d158      	bne.n	8000c80 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	613b      	str	r3, [r7, #16]
 8000bd2:	4b2e      	ldr	r3, [pc, #184]	; (8000c8c <HAL_ADC_MspInit+0xe0>)
 8000bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd6:	4a2d      	ldr	r2, [pc, #180]	; (8000c8c <HAL_ADC_MspInit+0xe0>)
 8000bd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bde:	4b2b      	ldr	r3, [pc, #172]	; (8000c8c <HAL_ADC_MspInit+0xe0>)
 8000be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	4b27      	ldr	r3, [pc, #156]	; (8000c8c <HAL_ADC_MspInit+0xe0>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a26      	ldr	r2, [pc, #152]	; (8000c8c <HAL_ADC_MspInit+0xe0>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b24      	ldr	r3, [pc, #144]	; (8000c8c <HAL_ADC_MspInit+0xe0>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c06:	2301      	movs	r3, #1
 8000c08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	4619      	mov	r1, r3
 8000c18:	481d      	ldr	r0, [pc, #116]	; (8000c90 <HAL_ADC_MspInit+0xe4>)
 8000c1a:	f001 fa4b 	bl	80020b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000c1e:	4b1d      	ldr	r3, [pc, #116]	; (8000c94 <HAL_ADC_MspInit+0xe8>)
 8000c20:	4a1d      	ldr	r2, [pc, #116]	; (8000c98 <HAL_ADC_MspInit+0xec>)
 8000c22:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000c24:	4b1b      	ldr	r3, [pc, #108]	; (8000c94 <HAL_ADC_MspInit+0xe8>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c2a:	4b1a      	ldr	r3, [pc, #104]	; (8000c94 <HAL_ADC_MspInit+0xe8>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c30:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <HAL_ADC_MspInit+0xe8>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c36:	4b17      	ldr	r3, [pc, #92]	; (8000c94 <HAL_ADC_MspInit+0xe8>)
 8000c38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c3c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c3e:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <HAL_ADC_MspInit+0xe8>)
 8000c40:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c44:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c46:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <HAL_ADC_MspInit+0xe8>)
 8000c48:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c4c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c4e:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <HAL_ADC_MspInit+0xe8>)
 8000c50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c54:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000c56:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <HAL_ADC_MspInit+0xe8>)
 8000c58:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c5c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c5e:	4b0d      	ldr	r3, [pc, #52]	; (8000c94 <HAL_ADC_MspInit+0xe8>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c64:	480b      	ldr	r0, [pc, #44]	; (8000c94 <HAL_ADC_MspInit+0xe8>)
 8000c66:	f000 feb5 	bl	80019d4 <HAL_DMA_Init>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8000c70:	f7ff ff6e 	bl	8000b50 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4a07      	ldr	r2, [pc, #28]	; (8000c94 <HAL_ADC_MspInit+0xe8>)
 8000c78:	639a      	str	r2, [r3, #56]	; 0x38
 8000c7a:	4a06      	ldr	r2, [pc, #24]	; (8000c94 <HAL_ADC_MspInit+0xe8>)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c80:	bf00      	nop
 8000c82:	3728      	adds	r7, #40	; 0x28
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40012000 	.word	0x40012000
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40020000 	.word	0x40020000
 8000c94:	20000c74 	.word	0x20000c74
 8000c98:	40026410 	.word	0x40026410

08000c9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a26      	ldr	r2, [pc, #152]	; (8000d44 <HAL_TIM_Base_MspInit+0xa8>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d116      	bne.n	8000cdc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	617b      	str	r3, [r7, #20]
 8000cb2:	4b25      	ldr	r3, [pc, #148]	; (8000d48 <HAL_TIM_Base_MspInit+0xac>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb6:	4a24      	ldr	r2, [pc, #144]	; (8000d48 <HAL_TIM_Base_MspInit+0xac>)
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cbe:	4b22      	ldr	r3, [pc, #136]	; (8000d48 <HAL_TIM_Base_MspInit+0xac>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	617b      	str	r3, [r7, #20]
 8000cc8:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2100      	movs	r1, #0
 8000cce:	2019      	movs	r0, #25
 8000cd0:	f000 fe49 	bl	8001966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000cd4:	2019      	movs	r0, #25
 8000cd6:	f000 fe62 	bl	800199e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000cda:	e02e      	b.n	8000d3a <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM2)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ce4:	d10e      	bne.n	8000d04 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
 8000cea:	4b17      	ldr	r3, [pc, #92]	; (8000d48 <HAL_TIM_Base_MspInit+0xac>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cee:	4a16      	ldr	r2, [pc, #88]	; (8000d48 <HAL_TIM_Base_MspInit+0xac>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf6:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <HAL_TIM_Base_MspInit+0xac>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	613b      	str	r3, [r7, #16]
 8000d00:	693b      	ldr	r3, [r7, #16]
}
 8000d02:	e01a      	b.n	8000d3a <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a10      	ldr	r2, [pc, #64]	; (8000d4c <HAL_TIM_Base_MspInit+0xb0>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d115      	bne.n	8000d3a <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	4b0d      	ldr	r3, [pc, #52]	; (8000d48 <HAL_TIM_Base_MspInit+0xac>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	4a0c      	ldr	r2, [pc, #48]	; (8000d48 <HAL_TIM_Base_MspInit+0xac>)
 8000d18:	f043 0302 	orr.w	r3, r3, #2
 8000d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d1e:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <HAL_TIM_Base_MspInit+0xac>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	201d      	movs	r0, #29
 8000d30:	f000 fe19 	bl	8001966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d34:	201d      	movs	r0, #29
 8000d36:	f000 fe32 	bl	800199e <HAL_NVIC_EnableIRQ>
}
 8000d3a:	bf00      	nop
 8000d3c:	3718      	adds	r7, #24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40010000 	.word	0x40010000
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	40000400 	.word	0x40000400

08000d50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b088      	sub	sp, #32
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 030c 	add.w	r3, r7, #12
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d70:	d11d      	bne.n	8000dae <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	60bb      	str	r3, [r7, #8]
 8000d76:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <HAL_TIM_MspPostInit+0x68>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4a0f      	ldr	r2, [pc, #60]	; (8000db8 <HAL_TIM_MspPostInit+0x68>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4b0d      	ldr	r3, [pc, #52]	; (8000db8 <HAL_TIM_MspPostInit+0x68>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	60bb      	str	r3, [r7, #8]
 8000d8c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_5;
 8000d8e:	2326      	movs	r3, #38	; 0x26
 8000d90:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da2:	f107 030c 	add.w	r3, r7, #12
 8000da6:	4619      	mov	r1, r3
 8000da8:	4804      	ldr	r0, [pc, #16]	; (8000dbc <HAL_TIM_MspPostInit+0x6c>)
 8000daa:	f001 f983 	bl	80020b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000dae:	bf00      	nop
 8000db0:	3720      	adds	r7, #32
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	40020000 	.word	0x40020000

08000dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <NMI_Handler+0x4>

08000dc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dca:	e7fe      	b.n	8000dca <HardFault_Handler+0x4>

08000dcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <MemManage_Handler+0x4>

08000dd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <BusFault_Handler+0x4>

08000dd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <UsageFault_Handler+0x4>

08000dde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e0c:	f000 f8ae 	bl	8000f6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e18:	4802      	ldr	r0, [pc, #8]	; (8000e24 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e1a:	f002 f91d 	bl	8003058 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000cd4 	.word	0x20000cd4

08000e28 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e2c:	4802      	ldr	r0, [pc, #8]	; (8000e38 <TIM3_IRQHandler+0x10>)
 8000e2e:	f002 f913 	bl	8003058 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000d64 	.word	0x20000d64

08000e3c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e40:	4802      	ldr	r0, [pc, #8]	; (8000e4c <DMA2_Stream0_IRQHandler+0x10>)
 8000e42:	f000 fecd 	bl	8001be0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000c74 	.word	0x20000c74

08000e50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <SystemInit+0x20>)
 8000e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e5a:	4a05      	ldr	r2, [pc, #20]	; (8000e70 <SystemInit+0x20>)
 8000e5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e78:	480d      	ldr	r0, [pc, #52]	; (8000eb0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e7a:	490e      	ldr	r1, [pc, #56]	; (8000eb4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e7c:	4a0e      	ldr	r2, [pc, #56]	; (8000eb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e80:	e002      	b.n	8000e88 <LoopCopyDataInit>

08000e82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e86:	3304      	adds	r3, #4

08000e88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e8c:	d3f9      	bcc.n	8000e82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8e:	4a0b      	ldr	r2, [pc, #44]	; (8000ebc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e90:	4c0b      	ldr	r4, [pc, #44]	; (8000ec0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e94:	e001      	b.n	8000e9a <LoopFillZerobss>

08000e96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e98:	3204      	adds	r2, #4

08000e9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e9c:	d3fb      	bcc.n	8000e96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e9e:	f7ff ffd7 	bl	8000e50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ea2:	f002 fee1 	bl	8003c68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ea6:	f7ff fbe1 	bl	800066c <main>
  bx  lr    
 8000eaa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000eac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000eb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb4:	20000c10 	.word	0x20000c10
  ldr r2, =_sidata
 8000eb8:	08003d00 	.word	0x08003d00
  ldr r2, =_sbss
 8000ebc:	20000c10 	.word	0x20000c10
  ldr r4, =_ebss
 8000ec0:	20000dc0 	.word	0x20000dc0

08000ec4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ec4:	e7fe      	b.n	8000ec4 <ADC_IRQHandler>
	...

08000ec8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ecc:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <HAL_Init+0x40>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a0d      	ldr	r2, [pc, #52]	; (8000f08 <HAL_Init+0x40>)
 8000ed2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ed6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ed8:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <HAL_Init+0x40>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <HAL_Init+0x40>)
 8000ede:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ee2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <HAL_Init+0x40>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a07      	ldr	r2, [pc, #28]	; (8000f08 <HAL_Init+0x40>)
 8000eea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef0:	2003      	movs	r0, #3
 8000ef2:	f000 fd2d 	bl	8001950 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef6:	2002      	movs	r0, #2
 8000ef8:	f000 f808 	bl	8000f0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000efc:	f7ff fe2e 	bl	8000b5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40023c00 	.word	0x40023c00

08000f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f14:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <HAL_InitTick+0x54>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <HAL_InitTick+0x58>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 fd45 	bl	80019ba <HAL_SYSTICK_Config>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e00e      	b.n	8000f58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2b0f      	cmp	r3, #15
 8000f3e:	d80a      	bhi.n	8000f56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f40:	2200      	movs	r2, #0
 8000f42:	6879      	ldr	r1, [r7, #4]
 8000f44:	f04f 30ff 	mov.w	r0, #4294967295
 8000f48:	f000 fd0d 	bl	8001966 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f4c:	4a06      	ldr	r2, [pc, #24]	; (8000f68 <HAL_InitTick+0x5c>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f52:	2300      	movs	r3, #0
 8000f54:	e000      	b.n	8000f58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000c04 	.word	0x20000c04
 8000f64:	20000c0c 	.word	0x20000c0c
 8000f68:	20000c08 	.word	0x20000c08

08000f6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_IncTick+0x20>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_IncTick+0x24>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <HAL_IncTick+0x24>)
 8000f7e:	6013      	str	r3, [r2, #0]
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	20000c0c 	.word	0x20000c0c
 8000f90:	20000dbc 	.word	0x20000dbc

08000f94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return uwTick;
 8000f98:	4b03      	ldr	r3, [pc, #12]	; (8000fa8 <HAL_GetTick+0x14>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	20000dbc 	.word	0x20000dbc

08000fac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d101      	bne.n	8000fc2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e033      	b.n	800102a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d109      	bne.n	8000fde <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff fdee 	bl	8000bac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	f003 0310 	and.w	r3, r3, #16
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d118      	bne.n	800101c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ff2:	f023 0302 	bic.w	r3, r3, #2
 8000ff6:	f043 0202 	orr.w	r2, r3, #2
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f000 fa58 	bl	80014b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	f023 0303 	bic.w	r3, r3, #3
 8001012:	f043 0201 	orr.w	r2, r3, #1
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	641a      	str	r2, [r3, #64]	; 0x40
 800101a:	e001      	b.n	8001020 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800101c:	2301      	movs	r3, #1
 800101e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001028:	7bfb      	ldrb	r3, [r7, #15]
}
 800102a:	4618      	mov	r0, r3
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001040:	2300      	movs	r3, #0
 8001042:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800104a:	2b01      	cmp	r3, #1
 800104c:	d101      	bne.n	8001052 <HAL_ADC_Start_DMA+0x1e>
 800104e:	2302      	movs	r3, #2
 8001050:	e0ce      	b.n	80011f0 <HAL_ADC_Start_DMA+0x1bc>
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	2201      	movs	r2, #1
 8001056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	f003 0301 	and.w	r3, r3, #1
 8001064:	2b01      	cmp	r3, #1
 8001066:	d018      	beq.n	800109a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	689a      	ldr	r2, [r3, #8]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f042 0201 	orr.w	r2, r2, #1
 8001076:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001078:	4b5f      	ldr	r3, [pc, #380]	; (80011f8 <HAL_ADC_Start_DMA+0x1c4>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a5f      	ldr	r2, [pc, #380]	; (80011fc <HAL_ADC_Start_DMA+0x1c8>)
 800107e:	fba2 2303 	umull	r2, r3, r2, r3
 8001082:	0c9a      	lsrs	r2, r3, #18
 8001084:	4613      	mov	r3, r2
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	4413      	add	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800108c:	e002      	b.n	8001094 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	3b01      	subs	r3, #1
 8001092:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d1f9      	bne.n	800108e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010a8:	d107      	bne.n	80010ba <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	689a      	ldr	r2, [r3, #8]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	f003 0301 	and.w	r3, r3, #1
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	f040 8086 	bne.w	80011d6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80010d2:	f023 0301 	bic.w	r3, r3, #1
 80010d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d007      	beq.n	80010fc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010f4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001100:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001104:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001108:	d106      	bne.n	8001118 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110e:	f023 0206 	bic.w	r2, r3, #6
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	645a      	str	r2, [r3, #68]	; 0x44
 8001116:	e002      	b.n	800111e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	2200      	movs	r2, #0
 800111c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	2200      	movs	r2, #0
 8001122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001126:	4b36      	ldr	r3, [pc, #216]	; (8001200 <HAL_ADC_Start_DMA+0x1cc>)
 8001128:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800112e:	4a35      	ldr	r2, [pc, #212]	; (8001204 <HAL_ADC_Start_DMA+0x1d0>)
 8001130:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001136:	4a34      	ldr	r2, [pc, #208]	; (8001208 <HAL_ADC_Start_DMA+0x1d4>)
 8001138:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800113e:	4a33      	ldr	r2, [pc, #204]	; (800120c <HAL_ADC_Start_DMA+0x1d8>)
 8001140:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800114a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	685a      	ldr	r2, [r3, #4]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800115a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	689a      	ldr	r2, [r3, #8]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800116a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	334c      	adds	r3, #76	; 0x4c
 8001176:	4619      	mov	r1, r3
 8001178:	68ba      	ldr	r2, [r7, #8]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f000 fcd8 	bl	8001b30 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f003 031f 	and.w	r3, r3, #31
 8001188:	2b00      	cmp	r3, #0
 800118a:	d10f      	bne.n	80011ac <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d129      	bne.n	80011ee <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	689a      	ldr	r2, [r3, #8]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	e020      	b.n	80011ee <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a17      	ldr	r2, [pc, #92]	; (8001210 <HAL_ADC_Start_DMA+0x1dc>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d11b      	bne.n	80011ee <HAL_ADC_Start_DMA+0x1ba>
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d114      	bne.n	80011ee <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	689a      	ldr	r2, [r3, #8]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	e00b      	b.n	80011ee <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	f043 0210 	orr.w	r2, r3, #16
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	f043 0201 	orr.w	r2, r3, #1
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80011ee:	2300      	movs	r3, #0
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3718      	adds	r7, #24
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000c04 	.word	0x20000c04
 80011fc:	431bde83 	.word	0x431bde83
 8001200:	40012300 	.word	0x40012300
 8001204:	080016ad 	.word	0x080016ad
 8001208:	08001767 	.word	0x08001767
 800120c:	08001783 	.word	0x08001783
 8001210:	40012000 	.word	0x40012000

08001214 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001264:	2b01      	cmp	r3, #1
 8001266:	d101      	bne.n	800126c <HAL_ADC_ConfigChannel+0x1c>
 8001268:	2302      	movs	r3, #2
 800126a:	e113      	b.n	8001494 <HAL_ADC_ConfigChannel+0x244>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2201      	movs	r2, #1
 8001270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b09      	cmp	r3, #9
 800127a:	d925      	bls.n	80012c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	68d9      	ldr	r1, [r3, #12]
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	b29b      	uxth	r3, r3
 8001288:	461a      	mov	r2, r3
 800128a:	4613      	mov	r3, r2
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	4413      	add	r3, r2
 8001290:	3b1e      	subs	r3, #30
 8001292:	2207      	movs	r2, #7
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	43da      	mvns	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	400a      	ands	r2, r1
 80012a0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	68d9      	ldr	r1, [r3, #12]
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	689a      	ldr	r2, [r3, #8]
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	4618      	mov	r0, r3
 80012b4:	4603      	mov	r3, r0
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	4403      	add	r3, r0
 80012ba:	3b1e      	subs	r3, #30
 80012bc:	409a      	lsls	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	430a      	orrs	r2, r1
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	e022      	b.n	800130e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	6919      	ldr	r1, [r3, #16]
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	461a      	mov	r2, r3
 80012d6:	4613      	mov	r3, r2
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	4413      	add	r3, r2
 80012dc:	2207      	movs	r2, #7
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43da      	mvns	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	400a      	ands	r2, r1
 80012ea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	6919      	ldr	r1, [r3, #16]
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	689a      	ldr	r2, [r3, #8]
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	4618      	mov	r0, r3
 80012fe:	4603      	mov	r3, r0
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	4403      	add	r3, r0
 8001304:	409a      	lsls	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	430a      	orrs	r2, r1
 800130c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	2b06      	cmp	r3, #6
 8001314:	d824      	bhi.n	8001360 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685a      	ldr	r2, [r3, #4]
 8001320:	4613      	mov	r3, r2
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	4413      	add	r3, r2
 8001326:	3b05      	subs	r3, #5
 8001328:	221f      	movs	r2, #31
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43da      	mvns	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	400a      	ands	r2, r1
 8001336:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	b29b      	uxth	r3, r3
 8001344:	4618      	mov	r0, r3
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685a      	ldr	r2, [r3, #4]
 800134a:	4613      	mov	r3, r2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	4413      	add	r3, r2
 8001350:	3b05      	subs	r3, #5
 8001352:	fa00 f203 	lsl.w	r2, r0, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	430a      	orrs	r2, r1
 800135c:	635a      	str	r2, [r3, #52]	; 0x34
 800135e:	e04c      	b.n	80013fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	2b0c      	cmp	r3, #12
 8001366:	d824      	bhi.n	80013b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685a      	ldr	r2, [r3, #4]
 8001372:	4613      	mov	r3, r2
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	4413      	add	r3, r2
 8001378:	3b23      	subs	r3, #35	; 0x23
 800137a:	221f      	movs	r2, #31
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	43da      	mvns	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	400a      	ands	r2, r1
 8001388:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	b29b      	uxth	r3, r3
 8001396:	4618      	mov	r0, r3
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685a      	ldr	r2, [r3, #4]
 800139c:	4613      	mov	r3, r2
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	4413      	add	r3, r2
 80013a2:	3b23      	subs	r3, #35	; 0x23
 80013a4:	fa00 f203 	lsl.w	r2, r0, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	430a      	orrs	r2, r1
 80013ae:	631a      	str	r2, [r3, #48]	; 0x30
 80013b0:	e023      	b.n	80013fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685a      	ldr	r2, [r3, #4]
 80013bc:	4613      	mov	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	4413      	add	r3, r2
 80013c2:	3b41      	subs	r3, #65	; 0x41
 80013c4:	221f      	movs	r2, #31
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43da      	mvns	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	400a      	ands	r2, r1
 80013d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	b29b      	uxth	r3, r3
 80013e0:	4618      	mov	r0, r3
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685a      	ldr	r2, [r3, #4]
 80013e6:	4613      	mov	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	4413      	add	r3, r2
 80013ec:	3b41      	subs	r3, #65	; 0x41
 80013ee:	fa00 f203 	lsl.w	r2, r0, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	430a      	orrs	r2, r1
 80013f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013fa:	4b29      	ldr	r3, [pc, #164]	; (80014a0 <HAL_ADC_ConfigChannel+0x250>)
 80013fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a28      	ldr	r2, [pc, #160]	; (80014a4 <HAL_ADC_ConfigChannel+0x254>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d10f      	bne.n	8001428 <HAL_ADC_ConfigChannel+0x1d8>
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b12      	cmp	r3, #18
 800140e:	d10b      	bne.n	8001428 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a1d      	ldr	r2, [pc, #116]	; (80014a4 <HAL_ADC_ConfigChannel+0x254>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d12b      	bne.n	800148a <HAL_ADC_ConfigChannel+0x23a>
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a1c      	ldr	r2, [pc, #112]	; (80014a8 <HAL_ADC_ConfigChannel+0x258>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d003      	beq.n	8001444 <HAL_ADC_ConfigChannel+0x1f4>
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b11      	cmp	r3, #17
 8001442:	d122      	bne.n	800148a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a11      	ldr	r2, [pc, #68]	; (80014a8 <HAL_ADC_ConfigChannel+0x258>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d111      	bne.n	800148a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001466:	4b11      	ldr	r3, [pc, #68]	; (80014ac <HAL_ADC_ConfigChannel+0x25c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a11      	ldr	r2, [pc, #68]	; (80014b0 <HAL_ADC_ConfigChannel+0x260>)
 800146c:	fba2 2303 	umull	r2, r3, r2, r3
 8001470:	0c9a      	lsrs	r2, r3, #18
 8001472:	4613      	mov	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	4413      	add	r3, r2
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800147c:	e002      	b.n	8001484 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	3b01      	subs	r3, #1
 8001482:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1f9      	bne.n	800147e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	40012300 	.word	0x40012300
 80014a4:	40012000 	.word	0x40012000
 80014a8:	10000012 	.word	0x10000012
 80014ac:	20000c04 	.word	0x20000c04
 80014b0:	431bde83 	.word	0x431bde83

080014b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014bc:	4b79      	ldr	r3, [pc, #484]	; (80016a4 <ADC_Init+0x1f0>)
 80014be:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	685a      	ldr	r2, [r3, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	431a      	orrs	r2, r3
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	685a      	ldr	r2, [r3, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6859      	ldr	r1, [r3, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	021a      	lsls	r2, r3, #8
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	430a      	orrs	r2, r1
 80014fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800150c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6859      	ldr	r1, [r3, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689a      	ldr	r2, [r3, #8]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	430a      	orrs	r2, r1
 800151e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	689a      	ldr	r2, [r3, #8]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800152e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6899      	ldr	r1, [r3, #8]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	68da      	ldr	r2, [r3, #12]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	430a      	orrs	r2, r1
 8001540:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001546:	4a58      	ldr	r2, [pc, #352]	; (80016a8 <ADC_Init+0x1f4>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d022      	beq.n	8001592 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	689a      	ldr	r2, [r3, #8]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800155a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6899      	ldr	r1, [r3, #8]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	430a      	orrs	r2, r1
 800156c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800157c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6899      	ldr	r1, [r3, #8]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	430a      	orrs	r2, r1
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	e00f      	b.n	80015b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	689a      	ldr	r2, [r3, #8]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	689a      	ldr	r2, [r3, #8]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	689a      	ldr	r2, [r3, #8]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f022 0202 	bic.w	r2, r2, #2
 80015c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	6899      	ldr	r1, [r3, #8]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	7e1b      	ldrb	r3, [r3, #24]
 80015cc:	005a      	lsls	r2, r3, #1
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	430a      	orrs	r2, r1
 80015d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d01b      	beq.n	8001618 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	685a      	ldr	r2, [r3, #4]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80015fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	6859      	ldr	r1, [r3, #4]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160a:	3b01      	subs	r3, #1
 800160c:	035a      	lsls	r2, r3, #13
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	430a      	orrs	r2, r1
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	e007      	b.n	8001628 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	685a      	ldr	r2, [r3, #4]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001626:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001636:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	3b01      	subs	r3, #1
 8001644:	051a      	lsls	r2, r3, #20
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	430a      	orrs	r2, r1
 800164c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	689a      	ldr	r2, [r3, #8]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800165c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6899      	ldr	r1, [r3, #8]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800166a:	025a      	lsls	r2, r3, #9
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	430a      	orrs	r2, r1
 8001672:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001682:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6899      	ldr	r1, [r3, #8]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	029a      	lsls	r2, r3, #10
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	430a      	orrs	r2, r1
 8001696:	609a      	str	r2, [r3, #8]
}
 8001698:	bf00      	nop
 800169a:	3714      	adds	r7, #20
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	40012300 	.word	0x40012300
 80016a8:	0f000001 	.word	0x0f000001

080016ac <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016b8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d13c      	bne.n	8001740 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d12b      	bne.n	8001738 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d127      	bne.n	8001738 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d006      	beq.n	8001704 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001700:	2b00      	cmp	r3, #0
 8001702:	d119      	bne.n	8001738 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	685a      	ldr	r2, [r3, #4]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f022 0220 	bic.w	r2, r2, #32
 8001712:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001718:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001724:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d105      	bne.n	8001738 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001730:	f043 0201 	orr.w	r2, r3, #1
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001738:	68f8      	ldr	r0, [r7, #12]
 800173a:	f7ff fd6b 	bl	8001214 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800173e:	e00e      	b.n	800175e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001744:	f003 0310 	and.w	r3, r3, #16
 8001748:	2b00      	cmp	r3, #0
 800174a:	d003      	beq.n	8001754 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800174c:	68f8      	ldr	r0, [r7, #12]
 800174e:	f7ff fd75 	bl	800123c <HAL_ADC_ErrorCallback>
}
 8001752:	e004      	b.n	800175e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	4798      	blx	r3
}
 800175e:	bf00      	nop
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b084      	sub	sp, #16
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001772:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001774:	68f8      	ldr	r0, [r7, #12]
 8001776:	f7ff fd57 	bl	8001228 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800177a:	bf00      	nop
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b084      	sub	sp, #16
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800178e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2240      	movs	r2, #64	; 0x40
 8001794:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179a:	f043 0204 	orr.w	r2, r3, #4
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80017a2:	68f8      	ldr	r0, [r7, #12]
 80017a4:	f7ff fd4a 	bl	800123c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80017a8:	bf00      	nop
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c0:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <__NVIC_SetPriorityGrouping+0x44>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017c6:	68ba      	ldr	r2, [r7, #8]
 80017c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017cc:	4013      	ands	r3, r2
 80017ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017e2:	4a04      	ldr	r2, [pc, #16]	; (80017f4 <__NVIC_SetPriorityGrouping+0x44>)
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	60d3      	str	r3, [r2, #12]
}
 80017e8:	bf00      	nop
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017fc:	4b04      	ldr	r3, [pc, #16]	; (8001810 <__NVIC_GetPriorityGrouping+0x18>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	0a1b      	lsrs	r3, r3, #8
 8001802:	f003 0307 	and.w	r3, r3, #7
}
 8001806:	4618      	mov	r0, r3
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	e000ed00 	.word	0xe000ed00

08001814 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800181e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001822:	2b00      	cmp	r3, #0
 8001824:	db0b      	blt.n	800183e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	f003 021f 	and.w	r2, r3, #31
 800182c:	4907      	ldr	r1, [pc, #28]	; (800184c <__NVIC_EnableIRQ+0x38>)
 800182e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001832:	095b      	lsrs	r3, r3, #5
 8001834:	2001      	movs	r0, #1
 8001836:	fa00 f202 	lsl.w	r2, r0, r2
 800183a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	e000e100 	.word	0xe000e100

08001850 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	6039      	str	r1, [r7, #0]
 800185a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800185c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001860:	2b00      	cmp	r3, #0
 8001862:	db0a      	blt.n	800187a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	b2da      	uxtb	r2, r3
 8001868:	490c      	ldr	r1, [pc, #48]	; (800189c <__NVIC_SetPriority+0x4c>)
 800186a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186e:	0112      	lsls	r2, r2, #4
 8001870:	b2d2      	uxtb	r2, r2
 8001872:	440b      	add	r3, r1
 8001874:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001878:	e00a      	b.n	8001890 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	b2da      	uxtb	r2, r3
 800187e:	4908      	ldr	r1, [pc, #32]	; (80018a0 <__NVIC_SetPriority+0x50>)
 8001880:	79fb      	ldrb	r3, [r7, #7]
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	3b04      	subs	r3, #4
 8001888:	0112      	lsls	r2, r2, #4
 800188a:	b2d2      	uxtb	r2, r2
 800188c:	440b      	add	r3, r1
 800188e:	761a      	strb	r2, [r3, #24]
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	e000e100 	.word	0xe000e100
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b089      	sub	sp, #36	; 0x24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	f1c3 0307 	rsb	r3, r3, #7
 80018be:	2b04      	cmp	r3, #4
 80018c0:	bf28      	it	cs
 80018c2:	2304      	movcs	r3, #4
 80018c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	3304      	adds	r3, #4
 80018ca:	2b06      	cmp	r3, #6
 80018cc:	d902      	bls.n	80018d4 <NVIC_EncodePriority+0x30>
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	3b03      	subs	r3, #3
 80018d2:	e000      	b.n	80018d6 <NVIC_EncodePriority+0x32>
 80018d4:	2300      	movs	r3, #0
 80018d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d8:	f04f 32ff 	mov.w	r2, #4294967295
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43da      	mvns	r2, r3
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	401a      	ands	r2, r3
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018ec:	f04f 31ff 	mov.w	r1, #4294967295
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	fa01 f303 	lsl.w	r3, r1, r3
 80018f6:	43d9      	mvns	r1, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018fc:	4313      	orrs	r3, r2
         );
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3724      	adds	r7, #36	; 0x24
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
	...

0800190c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3b01      	subs	r3, #1
 8001918:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800191c:	d301      	bcc.n	8001922 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800191e:	2301      	movs	r3, #1
 8001920:	e00f      	b.n	8001942 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001922:	4a0a      	ldr	r2, [pc, #40]	; (800194c <SysTick_Config+0x40>)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3b01      	subs	r3, #1
 8001928:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800192a:	210f      	movs	r1, #15
 800192c:	f04f 30ff 	mov.w	r0, #4294967295
 8001930:	f7ff ff8e 	bl	8001850 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001934:	4b05      	ldr	r3, [pc, #20]	; (800194c <SysTick_Config+0x40>)
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800193a:	4b04      	ldr	r3, [pc, #16]	; (800194c <SysTick_Config+0x40>)
 800193c:	2207      	movs	r2, #7
 800193e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	e000e010 	.word	0xe000e010

08001950 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f7ff ff29 	bl	80017b0 <__NVIC_SetPriorityGrouping>
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001966:	b580      	push	{r7, lr}
 8001968:	b086      	sub	sp, #24
 800196a:	af00      	add	r7, sp, #0
 800196c:	4603      	mov	r3, r0
 800196e:	60b9      	str	r1, [r7, #8]
 8001970:	607a      	str	r2, [r7, #4]
 8001972:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001978:	f7ff ff3e 	bl	80017f8 <__NVIC_GetPriorityGrouping>
 800197c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	68b9      	ldr	r1, [r7, #8]
 8001982:	6978      	ldr	r0, [r7, #20]
 8001984:	f7ff ff8e 	bl	80018a4 <NVIC_EncodePriority>
 8001988:	4602      	mov	r2, r0
 800198a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800198e:	4611      	mov	r1, r2
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff ff5d 	bl	8001850 <__NVIC_SetPriority>
}
 8001996:	bf00      	nop
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	4603      	mov	r3, r0
 80019a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff ff31 	bl	8001814 <__NVIC_EnableIRQ>
}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b082      	sub	sp, #8
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff ffa2 	bl	800190c <SysTick_Config>
 80019c8:	4603      	mov	r3, r0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
	...

080019d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80019e0:	f7ff fad8 	bl	8000f94 <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d101      	bne.n	80019f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e099      	b.n	8001b24 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2202      	movs	r2, #2
 80019f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f022 0201 	bic.w	r2, r2, #1
 8001a0e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a10:	e00f      	b.n	8001a32 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a12:	f7ff fabf 	bl	8000f94 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b05      	cmp	r3, #5
 8001a1e:	d908      	bls.n	8001a32 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2220      	movs	r2, #32
 8001a24:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2203      	movs	r2, #3
 8001a2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e078      	b.n	8001b24 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1e8      	bne.n	8001a12 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a48:	697a      	ldr	r2, [r7, #20]
 8001a4a:	4b38      	ldr	r3, [pc, #224]	; (8001b2c <HAL_DMA_Init+0x158>)
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685a      	ldr	r2, [r3, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a7e:	697a      	ldr	r2, [r7, #20]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a88:	2b04      	cmp	r3, #4
 8001a8a:	d107      	bne.n	8001a9c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a94:	4313      	orrs	r3, r2
 8001a96:	697a      	ldr	r2, [r7, #20]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	697a      	ldr	r2, [r7, #20]
 8001aa2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	f023 0307 	bic.w	r3, r3, #7
 8001ab2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab8:	697a      	ldr	r2, [r7, #20]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac2:	2b04      	cmp	r3, #4
 8001ac4:	d117      	bne.n	8001af6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aca:	697a      	ldr	r2, [r7, #20]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d00e      	beq.n	8001af6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f000 fa6f 	bl	8001fbc <DMA_CheckFifoParam>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d008      	beq.n	8001af6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2240      	movs	r2, #64	; 0x40
 8001ae8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2201      	movs	r2, #1
 8001aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001af2:	2301      	movs	r3, #1
 8001af4:	e016      	b.n	8001b24 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	697a      	ldr	r2, [r7, #20]
 8001afc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 fa26 	bl	8001f50 <DMA_CalcBaseAndBitshift>
 8001b04:	4603      	mov	r3, r0
 8001b06:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b0c:	223f      	movs	r2, #63	; 0x3f
 8001b0e:	409a      	lsls	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	f010803f 	.word	0xf010803f

08001b30 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
 8001b3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b46:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d101      	bne.n	8001b56 <HAL_DMA_Start_IT+0x26>
 8001b52:	2302      	movs	r3, #2
 8001b54:	e040      	b.n	8001bd8 <HAL_DMA_Start_IT+0xa8>
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d12f      	bne.n	8001bca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2202      	movs	r2, #2
 8001b6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2200      	movs	r2, #0
 8001b76:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	68b9      	ldr	r1, [r7, #8]
 8001b7e:	68f8      	ldr	r0, [r7, #12]
 8001b80:	f000 f9b8 	bl	8001ef4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b88:	223f      	movs	r2, #63	; 0x3f
 8001b8a:	409a      	lsls	r2, r3
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f042 0216 	orr.w	r2, r2, #22
 8001b9e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d007      	beq.n	8001bb8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f042 0208 	orr.w	r2, r2, #8
 8001bb6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f042 0201 	orr.w	r2, r2, #1
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	e005      	b.n	8001bd6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001bd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3718      	adds	r7, #24
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001be8:	2300      	movs	r3, #0
 8001bea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001bec:	4b8e      	ldr	r3, [pc, #568]	; (8001e28 <HAL_DMA_IRQHandler+0x248>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a8e      	ldr	r2, [pc, #568]	; (8001e2c <HAL_DMA_IRQHandler+0x24c>)
 8001bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf6:	0a9b      	lsrs	r3, r3, #10
 8001bf8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bfe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c0a:	2208      	movs	r2, #8
 8001c0c:	409a      	lsls	r2, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	4013      	ands	r3, r2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d01a      	beq.n	8001c4c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0304 	and.w	r3, r3, #4
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d013      	beq.n	8001c4c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f022 0204 	bic.w	r2, r2, #4
 8001c32:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c38:	2208      	movs	r2, #8
 8001c3a:	409a      	lsls	r2, r3
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c44:	f043 0201 	orr.w	r2, r3, #1
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c50:	2201      	movs	r2, #1
 8001c52:	409a      	lsls	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4013      	ands	r3, r2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d012      	beq.n	8001c82 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d00b      	beq.n	8001c82 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c6e:	2201      	movs	r2, #1
 8001c70:	409a      	lsls	r2, r3
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c7a:	f043 0202 	orr.w	r2, r3, #2
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c86:	2204      	movs	r2, #4
 8001c88:	409a      	lsls	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d012      	beq.n	8001cb8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d00b      	beq.n	8001cb8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca4:	2204      	movs	r2, #4
 8001ca6:	409a      	lsls	r2, r3
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb0:	f043 0204 	orr.w	r2, r3, #4
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cbc:	2210      	movs	r2, #16
 8001cbe:	409a      	lsls	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d043      	beq.n	8001d50 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d03c      	beq.n	8001d50 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cda:	2210      	movs	r2, #16
 8001cdc:	409a      	lsls	r2, r3
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d018      	beq.n	8001d22 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d108      	bne.n	8001d10 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d024      	beq.n	8001d50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	4798      	blx	r3
 8001d0e:	e01f      	b.n	8001d50 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d01b      	beq.n	8001d50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	4798      	blx	r3
 8001d20:	e016      	b.n	8001d50 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d107      	bne.n	8001d40 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f022 0208 	bic.w	r2, r2, #8
 8001d3e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d003      	beq.n	8001d50 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d54:	2220      	movs	r2, #32
 8001d56:	409a      	lsls	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f000 808f 	beq.w	8001e80 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0310 	and.w	r3, r3, #16
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f000 8087 	beq.w	8001e80 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d76:	2220      	movs	r2, #32
 8001d78:	409a      	lsls	r2, r3
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b05      	cmp	r3, #5
 8001d88:	d136      	bne.n	8001df8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f022 0216 	bic.w	r2, r2, #22
 8001d98:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	695a      	ldr	r2, [r3, #20]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001da8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d103      	bne.n	8001dba <HAL_DMA_IRQHandler+0x1da>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d007      	beq.n	8001dca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f022 0208 	bic.w	r2, r2, #8
 8001dc8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dce:	223f      	movs	r2, #63	; 0x3f
 8001dd0:	409a      	lsls	r2, r3
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d07e      	beq.n	8001eec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	4798      	blx	r3
        }
        return;
 8001df6:	e079      	b.n	8001eec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d01d      	beq.n	8001e42 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d10d      	bne.n	8001e30 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d031      	beq.n	8001e80 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	4798      	blx	r3
 8001e24:	e02c      	b.n	8001e80 <HAL_DMA_IRQHandler+0x2a0>
 8001e26:	bf00      	nop
 8001e28:	20000c04 	.word	0x20000c04
 8001e2c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d023      	beq.n	8001e80 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	4798      	blx	r3
 8001e40:	e01e      	b.n	8001e80 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d10f      	bne.n	8001e70 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f022 0210 	bic.w	r2, r2, #16
 8001e5e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d003      	beq.n	8001e80 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d032      	beq.n	8001eee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d022      	beq.n	8001eda <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2205      	movs	r2, #5
 8001e98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f022 0201 	bic.w	r2, r2, #1
 8001eaa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	60bb      	str	r3, [r7, #8]
 8001eb2:	697a      	ldr	r2, [r7, #20]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d307      	bcc.n	8001ec8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1f2      	bne.n	8001eac <HAL_DMA_IRQHandler+0x2cc>
 8001ec6:	e000      	b.n	8001eca <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001ec8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d005      	beq.n	8001eee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	4798      	blx	r3
 8001eea:	e000      	b.n	8001eee <HAL_DMA_IRQHandler+0x30e>
        return;
 8001eec:	bf00      	nop
    }
  }
}
 8001eee:	3718      	adds	r7, #24
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
 8001f00:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f10:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	2b40      	cmp	r3, #64	; 0x40
 8001f20:	d108      	bne.n	8001f34 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68ba      	ldr	r2, [r7, #8]
 8001f30:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f32:	e007      	b.n	8001f44 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68ba      	ldr	r2, [r7, #8]
 8001f3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	60da      	str	r2, [r3, #12]
}
 8001f44:	bf00      	nop
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	3b10      	subs	r3, #16
 8001f60:	4a14      	ldr	r2, [pc, #80]	; (8001fb4 <DMA_CalcBaseAndBitshift+0x64>)
 8001f62:	fba2 2303 	umull	r2, r3, r2, r3
 8001f66:	091b      	lsrs	r3, r3, #4
 8001f68:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f6a:	4a13      	ldr	r2, [pc, #76]	; (8001fb8 <DMA_CalcBaseAndBitshift+0x68>)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	4413      	add	r3, r2
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	461a      	mov	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2b03      	cmp	r3, #3
 8001f7c:	d909      	bls.n	8001f92 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f86:	f023 0303 	bic.w	r3, r3, #3
 8001f8a:	1d1a      	adds	r2, r3, #4
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	659a      	str	r2, [r3, #88]	; 0x58
 8001f90:	e007      	b.n	8001fa2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f9a:	f023 0303 	bic.w	r3, r3, #3
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3714      	adds	r7, #20
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	aaaaaaab 	.word	0xaaaaaaab
 8001fb8:	08003ce8 	.word	0x08003ce8

08001fbc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fcc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d11f      	bne.n	8002016 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	2b03      	cmp	r3, #3
 8001fda:	d856      	bhi.n	800208a <DMA_CheckFifoParam+0xce>
 8001fdc:	a201      	add	r2, pc, #4	; (adr r2, 8001fe4 <DMA_CheckFifoParam+0x28>)
 8001fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe2:	bf00      	nop
 8001fe4:	08001ff5 	.word	0x08001ff5
 8001fe8:	08002007 	.word	0x08002007
 8001fec:	08001ff5 	.word	0x08001ff5
 8001ff0:	0800208b 	.word	0x0800208b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d046      	beq.n	800208e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002004:	e043      	b.n	800208e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800200e:	d140      	bne.n	8002092 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002014:	e03d      	b.n	8002092 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800201e:	d121      	bne.n	8002064 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	2b03      	cmp	r3, #3
 8002024:	d837      	bhi.n	8002096 <DMA_CheckFifoParam+0xda>
 8002026:	a201      	add	r2, pc, #4	; (adr r2, 800202c <DMA_CheckFifoParam+0x70>)
 8002028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800202c:	0800203d 	.word	0x0800203d
 8002030:	08002043 	.word	0x08002043
 8002034:	0800203d 	.word	0x0800203d
 8002038:	08002055 	.word	0x08002055
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	73fb      	strb	r3, [r7, #15]
      break;
 8002040:	e030      	b.n	80020a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002046:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d025      	beq.n	800209a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002052:	e022      	b.n	800209a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002058:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800205c:	d11f      	bne.n	800209e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002062:	e01c      	b.n	800209e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	2b02      	cmp	r3, #2
 8002068:	d903      	bls.n	8002072 <DMA_CheckFifoParam+0xb6>
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	2b03      	cmp	r3, #3
 800206e:	d003      	beq.n	8002078 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002070:	e018      	b.n	80020a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	73fb      	strb	r3, [r7, #15]
      break;
 8002076:	e015      	b.n	80020a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d00e      	beq.n	80020a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	73fb      	strb	r3, [r7, #15]
      break;
 8002088:	e00b      	b.n	80020a2 <DMA_CheckFifoParam+0xe6>
      break;
 800208a:	bf00      	nop
 800208c:	e00a      	b.n	80020a4 <DMA_CheckFifoParam+0xe8>
      break;
 800208e:	bf00      	nop
 8002090:	e008      	b.n	80020a4 <DMA_CheckFifoParam+0xe8>
      break;
 8002092:	bf00      	nop
 8002094:	e006      	b.n	80020a4 <DMA_CheckFifoParam+0xe8>
      break;
 8002096:	bf00      	nop
 8002098:	e004      	b.n	80020a4 <DMA_CheckFifoParam+0xe8>
      break;
 800209a:	bf00      	nop
 800209c:	e002      	b.n	80020a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800209e:	bf00      	nop
 80020a0:	e000      	b.n	80020a4 <DMA_CheckFifoParam+0xe8>
      break;
 80020a2:	bf00      	nop
    }
  } 
  
  return status; 
 80020a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop

080020b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b089      	sub	sp, #36	; 0x24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020c6:	2300      	movs	r3, #0
 80020c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ca:	2300      	movs	r3, #0
 80020cc:	61fb      	str	r3, [r7, #28]
 80020ce:	e159      	b.n	8002384 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020d0:	2201      	movs	r2, #1
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	697a      	ldr	r2, [r7, #20]
 80020e0:	4013      	ands	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	f040 8148 	bne.w	800237e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f003 0303 	and.w	r3, r3, #3
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d005      	beq.n	8002106 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002102:	2b02      	cmp	r3, #2
 8002104:	d130      	bne.n	8002168 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	2203      	movs	r2, #3
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43db      	mvns	r3, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4013      	ands	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	68da      	ldr	r2, [r3, #12]
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	4313      	orrs	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800213c:	2201      	movs	r2, #1
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	43db      	mvns	r3, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	091b      	lsrs	r3, r3, #4
 8002152:	f003 0201 	and.w	r2, r3, #1
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4313      	orrs	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f003 0303 	and.w	r3, r3, #3
 8002170:	2b03      	cmp	r3, #3
 8002172:	d017      	beq.n	80021a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	2203      	movs	r2, #3
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	43db      	mvns	r3, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4013      	ands	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4313      	orrs	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 0303 	and.w	r3, r3, #3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d123      	bne.n	80021f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	08da      	lsrs	r2, r3, #3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	3208      	adds	r2, #8
 80021b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	f003 0307 	and.w	r3, r3, #7
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	220f      	movs	r2, #15
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	43db      	mvns	r3, r3
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4013      	ands	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	691a      	ldr	r2, [r3, #16]
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	08da      	lsrs	r2, r3, #3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	3208      	adds	r2, #8
 80021f2:	69b9      	ldr	r1, [r7, #24]
 80021f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	2203      	movs	r2, #3
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4013      	ands	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f003 0203 	and.w	r2, r3, #3
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4313      	orrs	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002234:	2b00      	cmp	r3, #0
 8002236:	f000 80a2 	beq.w	800237e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	4b57      	ldr	r3, [pc, #348]	; (800239c <HAL_GPIO_Init+0x2e8>)
 8002240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002242:	4a56      	ldr	r2, [pc, #344]	; (800239c <HAL_GPIO_Init+0x2e8>)
 8002244:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002248:	6453      	str	r3, [r2, #68]	; 0x44
 800224a:	4b54      	ldr	r3, [pc, #336]	; (800239c <HAL_GPIO_Init+0x2e8>)
 800224c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002256:	4a52      	ldr	r2, [pc, #328]	; (80023a0 <HAL_GPIO_Init+0x2ec>)
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	089b      	lsrs	r3, r3, #2
 800225c:	3302      	adds	r3, #2
 800225e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002262:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	f003 0303 	and.w	r3, r3, #3
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	220f      	movs	r2, #15
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	43db      	mvns	r3, r3
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	4013      	ands	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a49      	ldr	r2, [pc, #292]	; (80023a4 <HAL_GPIO_Init+0x2f0>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d019      	beq.n	80022b6 <HAL_GPIO_Init+0x202>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a48      	ldr	r2, [pc, #288]	; (80023a8 <HAL_GPIO_Init+0x2f4>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d013      	beq.n	80022b2 <HAL_GPIO_Init+0x1fe>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a47      	ldr	r2, [pc, #284]	; (80023ac <HAL_GPIO_Init+0x2f8>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d00d      	beq.n	80022ae <HAL_GPIO_Init+0x1fa>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a46      	ldr	r2, [pc, #280]	; (80023b0 <HAL_GPIO_Init+0x2fc>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d007      	beq.n	80022aa <HAL_GPIO_Init+0x1f6>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a45      	ldr	r2, [pc, #276]	; (80023b4 <HAL_GPIO_Init+0x300>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d101      	bne.n	80022a6 <HAL_GPIO_Init+0x1f2>
 80022a2:	2304      	movs	r3, #4
 80022a4:	e008      	b.n	80022b8 <HAL_GPIO_Init+0x204>
 80022a6:	2307      	movs	r3, #7
 80022a8:	e006      	b.n	80022b8 <HAL_GPIO_Init+0x204>
 80022aa:	2303      	movs	r3, #3
 80022ac:	e004      	b.n	80022b8 <HAL_GPIO_Init+0x204>
 80022ae:	2302      	movs	r3, #2
 80022b0:	e002      	b.n	80022b8 <HAL_GPIO_Init+0x204>
 80022b2:	2301      	movs	r3, #1
 80022b4:	e000      	b.n	80022b8 <HAL_GPIO_Init+0x204>
 80022b6:	2300      	movs	r3, #0
 80022b8:	69fa      	ldr	r2, [r7, #28]
 80022ba:	f002 0203 	and.w	r2, r2, #3
 80022be:	0092      	lsls	r2, r2, #2
 80022c0:	4093      	lsls	r3, r2
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022c8:	4935      	ldr	r1, [pc, #212]	; (80023a0 <HAL_GPIO_Init+0x2ec>)
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	089b      	lsrs	r3, r3, #2
 80022ce:	3302      	adds	r3, #2
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022d6:	4b38      	ldr	r3, [pc, #224]	; (80023b8 <HAL_GPIO_Init+0x304>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	43db      	mvns	r3, r3
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4013      	ands	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022fa:	4a2f      	ldr	r2, [pc, #188]	; (80023b8 <HAL_GPIO_Init+0x304>)
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002300:	4b2d      	ldr	r3, [pc, #180]	; (80023b8 <HAL_GPIO_Init+0x304>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	43db      	mvns	r3, r3
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4013      	ands	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d003      	beq.n	8002324 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	4313      	orrs	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002324:	4a24      	ldr	r2, [pc, #144]	; (80023b8 <HAL_GPIO_Init+0x304>)
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800232a:	4b23      	ldr	r3, [pc, #140]	; (80023b8 <HAL_GPIO_Init+0x304>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	43db      	mvns	r3, r3
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	4013      	ands	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	4313      	orrs	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800234e:	4a1a      	ldr	r2, [pc, #104]	; (80023b8 <HAL_GPIO_Init+0x304>)
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002354:	4b18      	ldr	r3, [pc, #96]	; (80023b8 <HAL_GPIO_Init+0x304>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	43db      	mvns	r3, r3
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4013      	ands	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d003      	beq.n	8002378 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	4313      	orrs	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002378:	4a0f      	ldr	r2, [pc, #60]	; (80023b8 <HAL_GPIO_Init+0x304>)
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	3301      	adds	r3, #1
 8002382:	61fb      	str	r3, [r7, #28]
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	2b0f      	cmp	r3, #15
 8002388:	f67f aea2 	bls.w	80020d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800238c:	bf00      	nop
 800238e:	bf00      	nop
 8002390:	3724      	adds	r7, #36	; 0x24
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	40023800 	.word	0x40023800
 80023a0:	40013800 	.word	0x40013800
 80023a4:	40020000 	.word	0x40020000
 80023a8:	40020400 	.word	0x40020400
 80023ac:	40020800 	.word	0x40020800
 80023b0:	40020c00 	.word	0x40020c00
 80023b4:	40021000 	.word	0x40021000
 80023b8:	40013c00 	.word	0x40013c00

080023bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e267      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d075      	beq.n	80024c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023da:	4b88      	ldr	r3, [pc, #544]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f003 030c 	and.w	r3, r3, #12
 80023e2:	2b04      	cmp	r3, #4
 80023e4:	d00c      	beq.n	8002400 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023e6:	4b85      	ldr	r3, [pc, #532]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023ee:	2b08      	cmp	r3, #8
 80023f0:	d112      	bne.n	8002418 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023f2:	4b82      	ldr	r3, [pc, #520]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023fe:	d10b      	bne.n	8002418 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002400:	4b7e      	ldr	r3, [pc, #504]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d05b      	beq.n	80024c4 <HAL_RCC_OscConfig+0x108>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d157      	bne.n	80024c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e242      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002420:	d106      	bne.n	8002430 <HAL_RCC_OscConfig+0x74>
 8002422:	4b76      	ldr	r3, [pc, #472]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a75      	ldr	r2, [pc, #468]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 8002428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800242c:	6013      	str	r3, [r2, #0]
 800242e:	e01d      	b.n	800246c <HAL_RCC_OscConfig+0xb0>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002438:	d10c      	bne.n	8002454 <HAL_RCC_OscConfig+0x98>
 800243a:	4b70      	ldr	r3, [pc, #448]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a6f      	ldr	r2, [pc, #444]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 8002440:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002444:	6013      	str	r3, [r2, #0]
 8002446:	4b6d      	ldr	r3, [pc, #436]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a6c      	ldr	r2, [pc, #432]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 800244c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002450:	6013      	str	r3, [r2, #0]
 8002452:	e00b      	b.n	800246c <HAL_RCC_OscConfig+0xb0>
 8002454:	4b69      	ldr	r3, [pc, #420]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a68      	ldr	r2, [pc, #416]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 800245a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800245e:	6013      	str	r3, [r2, #0]
 8002460:	4b66      	ldr	r3, [pc, #408]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a65      	ldr	r2, [pc, #404]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 8002466:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800246a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d013      	beq.n	800249c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002474:	f7fe fd8e 	bl	8000f94 <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800247c:	f7fe fd8a 	bl	8000f94 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b64      	cmp	r3, #100	; 0x64
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e207      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800248e:	4b5b      	ldr	r3, [pc, #364]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d0f0      	beq.n	800247c <HAL_RCC_OscConfig+0xc0>
 800249a:	e014      	b.n	80024c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249c:	f7fe fd7a 	bl	8000f94 <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024a4:	f7fe fd76 	bl	8000f94 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b64      	cmp	r3, #100	; 0x64
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e1f3      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024b6:	4b51      	ldr	r3, [pc, #324]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f0      	bne.n	80024a4 <HAL_RCC_OscConfig+0xe8>
 80024c2:	e000      	b.n	80024c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d063      	beq.n	800259a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024d2:	4b4a      	ldr	r3, [pc, #296]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 030c 	and.w	r3, r3, #12
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00b      	beq.n	80024f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024de:	4b47      	ldr	r3, [pc, #284]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024e6:	2b08      	cmp	r3, #8
 80024e8:	d11c      	bne.n	8002524 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ea:	4b44      	ldr	r3, [pc, #272]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d116      	bne.n	8002524 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024f6:	4b41      	ldr	r3, [pc, #260]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d005      	beq.n	800250e <HAL_RCC_OscConfig+0x152>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d001      	beq.n	800250e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e1c7      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800250e:	4b3b      	ldr	r3, [pc, #236]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	4937      	ldr	r1, [pc, #220]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 800251e:	4313      	orrs	r3, r2
 8002520:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002522:	e03a      	b.n	800259a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d020      	beq.n	800256e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800252c:	4b34      	ldr	r3, [pc, #208]	; (8002600 <HAL_RCC_OscConfig+0x244>)
 800252e:	2201      	movs	r2, #1
 8002530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002532:	f7fe fd2f 	bl	8000f94 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002538:	e008      	b.n	800254c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800253a:	f7fe fd2b 	bl	8000f94 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e1a8      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800254c:	4b2b      	ldr	r3, [pc, #172]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d0f0      	beq.n	800253a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002558:	4b28      	ldr	r3, [pc, #160]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	4925      	ldr	r1, [pc, #148]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 8002568:	4313      	orrs	r3, r2
 800256a:	600b      	str	r3, [r1, #0]
 800256c:	e015      	b.n	800259a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800256e:	4b24      	ldr	r3, [pc, #144]	; (8002600 <HAL_RCC_OscConfig+0x244>)
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002574:	f7fe fd0e 	bl	8000f94 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800257c:	f7fe fd0a 	bl	8000f94 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e187      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800258e:	4b1b      	ldr	r3, [pc, #108]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1f0      	bne.n	800257c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0308 	and.w	r3, r3, #8
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d036      	beq.n	8002614 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d016      	beq.n	80025dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ae:	4b15      	ldr	r3, [pc, #84]	; (8002604 <HAL_RCC_OscConfig+0x248>)
 80025b0:	2201      	movs	r2, #1
 80025b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b4:	f7fe fcee 	bl	8000f94 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025bc:	f7fe fcea 	bl	8000f94 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e167      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ce:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 80025d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d0f0      	beq.n	80025bc <HAL_RCC_OscConfig+0x200>
 80025da:	e01b      	b.n	8002614 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025dc:	4b09      	ldr	r3, [pc, #36]	; (8002604 <HAL_RCC_OscConfig+0x248>)
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e2:	f7fe fcd7 	bl	8000f94 <HAL_GetTick>
 80025e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025e8:	e00e      	b.n	8002608 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025ea:	f7fe fcd3 	bl	8000f94 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d907      	bls.n	8002608 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e150      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
 80025fc:	40023800 	.word	0x40023800
 8002600:	42470000 	.word	0x42470000
 8002604:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002608:	4b88      	ldr	r3, [pc, #544]	; (800282c <HAL_RCC_OscConfig+0x470>)
 800260a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1ea      	bne.n	80025ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0304 	and.w	r3, r3, #4
 800261c:	2b00      	cmp	r3, #0
 800261e:	f000 8097 	beq.w	8002750 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002622:	2300      	movs	r3, #0
 8002624:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002626:	4b81      	ldr	r3, [pc, #516]	; (800282c <HAL_RCC_OscConfig+0x470>)
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10f      	bne.n	8002652 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	60bb      	str	r3, [r7, #8]
 8002636:	4b7d      	ldr	r3, [pc, #500]	; (800282c <HAL_RCC_OscConfig+0x470>)
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	4a7c      	ldr	r2, [pc, #496]	; (800282c <HAL_RCC_OscConfig+0x470>)
 800263c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002640:	6413      	str	r3, [r2, #64]	; 0x40
 8002642:	4b7a      	ldr	r3, [pc, #488]	; (800282c <HAL_RCC_OscConfig+0x470>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264a:	60bb      	str	r3, [r7, #8]
 800264c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800264e:	2301      	movs	r3, #1
 8002650:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002652:	4b77      	ldr	r3, [pc, #476]	; (8002830 <HAL_RCC_OscConfig+0x474>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800265a:	2b00      	cmp	r3, #0
 800265c:	d118      	bne.n	8002690 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800265e:	4b74      	ldr	r3, [pc, #464]	; (8002830 <HAL_RCC_OscConfig+0x474>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a73      	ldr	r2, [pc, #460]	; (8002830 <HAL_RCC_OscConfig+0x474>)
 8002664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002668:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800266a:	f7fe fc93 	bl	8000f94 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002670:	e008      	b.n	8002684 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002672:	f7fe fc8f 	bl	8000f94 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e10c      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002684:	4b6a      	ldr	r3, [pc, #424]	; (8002830 <HAL_RCC_OscConfig+0x474>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0f0      	beq.n	8002672 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d106      	bne.n	80026a6 <HAL_RCC_OscConfig+0x2ea>
 8002698:	4b64      	ldr	r3, [pc, #400]	; (800282c <HAL_RCC_OscConfig+0x470>)
 800269a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800269c:	4a63      	ldr	r2, [pc, #396]	; (800282c <HAL_RCC_OscConfig+0x470>)
 800269e:	f043 0301 	orr.w	r3, r3, #1
 80026a2:	6713      	str	r3, [r2, #112]	; 0x70
 80026a4:	e01c      	b.n	80026e0 <HAL_RCC_OscConfig+0x324>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	2b05      	cmp	r3, #5
 80026ac:	d10c      	bne.n	80026c8 <HAL_RCC_OscConfig+0x30c>
 80026ae:	4b5f      	ldr	r3, [pc, #380]	; (800282c <HAL_RCC_OscConfig+0x470>)
 80026b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b2:	4a5e      	ldr	r2, [pc, #376]	; (800282c <HAL_RCC_OscConfig+0x470>)
 80026b4:	f043 0304 	orr.w	r3, r3, #4
 80026b8:	6713      	str	r3, [r2, #112]	; 0x70
 80026ba:	4b5c      	ldr	r3, [pc, #368]	; (800282c <HAL_RCC_OscConfig+0x470>)
 80026bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026be:	4a5b      	ldr	r2, [pc, #364]	; (800282c <HAL_RCC_OscConfig+0x470>)
 80026c0:	f043 0301 	orr.w	r3, r3, #1
 80026c4:	6713      	str	r3, [r2, #112]	; 0x70
 80026c6:	e00b      	b.n	80026e0 <HAL_RCC_OscConfig+0x324>
 80026c8:	4b58      	ldr	r3, [pc, #352]	; (800282c <HAL_RCC_OscConfig+0x470>)
 80026ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026cc:	4a57      	ldr	r2, [pc, #348]	; (800282c <HAL_RCC_OscConfig+0x470>)
 80026ce:	f023 0301 	bic.w	r3, r3, #1
 80026d2:	6713      	str	r3, [r2, #112]	; 0x70
 80026d4:	4b55      	ldr	r3, [pc, #340]	; (800282c <HAL_RCC_OscConfig+0x470>)
 80026d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d8:	4a54      	ldr	r2, [pc, #336]	; (800282c <HAL_RCC_OscConfig+0x470>)
 80026da:	f023 0304 	bic.w	r3, r3, #4
 80026de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d015      	beq.n	8002714 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e8:	f7fe fc54 	bl	8000f94 <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ee:	e00a      	b.n	8002706 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026f0:	f7fe fc50 	bl	8000f94 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80026fe:	4293      	cmp	r3, r2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e0cb      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002706:	4b49      	ldr	r3, [pc, #292]	; (800282c <HAL_RCC_OscConfig+0x470>)
 8002708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d0ee      	beq.n	80026f0 <HAL_RCC_OscConfig+0x334>
 8002712:	e014      	b.n	800273e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002714:	f7fe fc3e 	bl	8000f94 <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800271a:	e00a      	b.n	8002732 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800271c:	f7fe fc3a 	bl	8000f94 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	f241 3288 	movw	r2, #5000	; 0x1388
 800272a:	4293      	cmp	r3, r2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e0b5      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002732:	4b3e      	ldr	r3, [pc, #248]	; (800282c <HAL_RCC_OscConfig+0x470>)
 8002734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1ee      	bne.n	800271c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800273e:	7dfb      	ldrb	r3, [r7, #23]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d105      	bne.n	8002750 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002744:	4b39      	ldr	r3, [pc, #228]	; (800282c <HAL_RCC_OscConfig+0x470>)
 8002746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002748:	4a38      	ldr	r2, [pc, #224]	; (800282c <HAL_RCC_OscConfig+0x470>)
 800274a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800274e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 80a1 	beq.w	800289c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800275a:	4b34      	ldr	r3, [pc, #208]	; (800282c <HAL_RCC_OscConfig+0x470>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f003 030c 	and.w	r3, r3, #12
 8002762:	2b08      	cmp	r3, #8
 8002764:	d05c      	beq.n	8002820 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	2b02      	cmp	r3, #2
 800276c:	d141      	bne.n	80027f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800276e:	4b31      	ldr	r3, [pc, #196]	; (8002834 <HAL_RCC_OscConfig+0x478>)
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002774:	f7fe fc0e 	bl	8000f94 <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800277c:	f7fe fc0a 	bl	8000f94 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e087      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800278e:	4b27      	ldr	r3, [pc, #156]	; (800282c <HAL_RCC_OscConfig+0x470>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1f0      	bne.n	800277c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69da      	ldr	r2, [r3, #28]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	431a      	orrs	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a8:	019b      	lsls	r3, r3, #6
 80027aa:	431a      	orrs	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b0:	085b      	lsrs	r3, r3, #1
 80027b2:	3b01      	subs	r3, #1
 80027b4:	041b      	lsls	r3, r3, #16
 80027b6:	431a      	orrs	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027bc:	061b      	lsls	r3, r3, #24
 80027be:	491b      	ldr	r1, [pc, #108]	; (800282c <HAL_RCC_OscConfig+0x470>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027c4:	4b1b      	ldr	r3, [pc, #108]	; (8002834 <HAL_RCC_OscConfig+0x478>)
 80027c6:	2201      	movs	r2, #1
 80027c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ca:	f7fe fbe3 	bl	8000f94 <HAL_GetTick>
 80027ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027d0:	e008      	b.n	80027e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027d2:	f7fe fbdf 	bl	8000f94 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e05c      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027e4:	4b11      	ldr	r3, [pc, #68]	; (800282c <HAL_RCC_OscConfig+0x470>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d0f0      	beq.n	80027d2 <HAL_RCC_OscConfig+0x416>
 80027f0:	e054      	b.n	800289c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027f2:	4b10      	ldr	r3, [pc, #64]	; (8002834 <HAL_RCC_OscConfig+0x478>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f8:	f7fe fbcc 	bl	8000f94 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002800:	f7fe fbc8 	bl	8000f94 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e045      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002812:	4b06      	ldr	r3, [pc, #24]	; (800282c <HAL_RCC_OscConfig+0x470>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1f0      	bne.n	8002800 <HAL_RCC_OscConfig+0x444>
 800281e:	e03d      	b.n	800289c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d107      	bne.n	8002838 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e038      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
 800282c:	40023800 	.word	0x40023800
 8002830:	40007000 	.word	0x40007000
 8002834:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002838:	4b1b      	ldr	r3, [pc, #108]	; (80028a8 <HAL_RCC_OscConfig+0x4ec>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d028      	beq.n	8002898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002850:	429a      	cmp	r2, r3
 8002852:	d121      	bne.n	8002898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800285e:	429a      	cmp	r2, r3
 8002860:	d11a      	bne.n	8002898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002868:	4013      	ands	r3, r2
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800286e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002870:	4293      	cmp	r3, r2
 8002872:	d111      	bne.n	8002898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287e:	085b      	lsrs	r3, r3, #1
 8002880:	3b01      	subs	r3, #1
 8002882:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002884:	429a      	cmp	r2, r3
 8002886:	d107      	bne.n	8002898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002892:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002894:	429a      	cmp	r2, r3
 8002896:	d001      	beq.n	800289c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e000      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3718      	adds	r7, #24
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	40023800 	.word	0x40023800

080028ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d101      	bne.n	80028c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e0cc      	b.n	8002a5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028c0:	4b68      	ldr	r3, [pc, #416]	; (8002a64 <HAL_RCC_ClockConfig+0x1b8>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d90c      	bls.n	80028e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ce:	4b65      	ldr	r3, [pc, #404]	; (8002a64 <HAL_RCC_ClockConfig+0x1b8>)
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028d6:	4b63      	ldr	r3, [pc, #396]	; (8002a64 <HAL_RCC_ClockConfig+0x1b8>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0307 	and.w	r3, r3, #7
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d001      	beq.n	80028e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e0b8      	b.n	8002a5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d020      	beq.n	8002936 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0304 	and.w	r3, r3, #4
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d005      	beq.n	800290c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002900:	4b59      	ldr	r3, [pc, #356]	; (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	4a58      	ldr	r2, [pc, #352]	; (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 8002906:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800290a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0308 	and.w	r3, r3, #8
 8002914:	2b00      	cmp	r3, #0
 8002916:	d005      	beq.n	8002924 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002918:	4b53      	ldr	r3, [pc, #332]	; (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	4a52      	ldr	r2, [pc, #328]	; (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 800291e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002922:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002924:	4b50      	ldr	r3, [pc, #320]	; (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	494d      	ldr	r1, [pc, #308]	; (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 8002932:	4313      	orrs	r3, r2
 8002934:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b00      	cmp	r3, #0
 8002940:	d044      	beq.n	80029cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d107      	bne.n	800295a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800294a:	4b47      	ldr	r3, [pc, #284]	; (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d119      	bne.n	800298a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e07f      	b.n	8002a5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b02      	cmp	r3, #2
 8002960:	d003      	beq.n	800296a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002966:	2b03      	cmp	r3, #3
 8002968:	d107      	bne.n	800297a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800296a:	4b3f      	ldr	r3, [pc, #252]	; (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d109      	bne.n	800298a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e06f      	b.n	8002a5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800297a:	4b3b      	ldr	r3, [pc, #236]	; (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e067      	b.n	8002a5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800298a:	4b37      	ldr	r3, [pc, #220]	; (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f023 0203 	bic.w	r2, r3, #3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	4934      	ldr	r1, [pc, #208]	; (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 8002998:	4313      	orrs	r3, r2
 800299a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800299c:	f7fe fafa 	bl	8000f94 <HAL_GetTick>
 80029a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029a2:	e00a      	b.n	80029ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029a4:	f7fe faf6 	bl	8000f94 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e04f      	b.n	8002a5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ba:	4b2b      	ldr	r3, [pc, #172]	; (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 020c 	and.w	r2, r3, #12
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d1eb      	bne.n	80029a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029cc:	4b25      	ldr	r3, [pc, #148]	; (8002a64 <HAL_RCC_ClockConfig+0x1b8>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d20c      	bcs.n	80029f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029da:	4b22      	ldr	r3, [pc, #136]	; (8002a64 <HAL_RCC_ClockConfig+0x1b8>)
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029e2:	4b20      	ldr	r3, [pc, #128]	; (8002a64 <HAL_RCC_ClockConfig+0x1b8>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d001      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e032      	b.n	8002a5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0304 	and.w	r3, r3, #4
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d008      	beq.n	8002a12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a00:	4b19      	ldr	r3, [pc, #100]	; (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	4916      	ldr	r1, [pc, #88]	; (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0308 	and.w	r3, r3, #8
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d009      	beq.n	8002a32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a1e:	4b12      	ldr	r3, [pc, #72]	; (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	490e      	ldr	r1, [pc, #56]	; (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a32:	f000 f821 	bl	8002a78 <HAL_RCC_GetSysClockFreq>
 8002a36:	4602      	mov	r2, r0
 8002a38:	4b0b      	ldr	r3, [pc, #44]	; (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	091b      	lsrs	r3, r3, #4
 8002a3e:	f003 030f 	and.w	r3, r3, #15
 8002a42:	490a      	ldr	r1, [pc, #40]	; (8002a6c <HAL_RCC_ClockConfig+0x1c0>)
 8002a44:	5ccb      	ldrb	r3, [r1, r3]
 8002a46:	fa22 f303 	lsr.w	r3, r2, r3
 8002a4a:	4a09      	ldr	r2, [pc, #36]	; (8002a70 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a4e:	4b09      	ldr	r3, [pc, #36]	; (8002a74 <HAL_RCC_ClockConfig+0x1c8>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7fe fa5a 	bl	8000f0c <HAL_InitTick>

  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40023c00 	.word	0x40023c00
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	08003cd8 	.word	0x08003cd8
 8002a70:	20000c04 	.word	0x20000c04
 8002a74:	20000c08 	.word	0x20000c08

08002a78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a7c:	b094      	sub	sp, #80	; 0x50
 8002a7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a80:	2300      	movs	r3, #0
 8002a82:	647b      	str	r3, [r7, #68]	; 0x44
 8002a84:	2300      	movs	r3, #0
 8002a86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a88:	2300      	movs	r3, #0
 8002a8a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a90:	4b79      	ldr	r3, [pc, #484]	; (8002c78 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f003 030c 	and.w	r3, r3, #12
 8002a98:	2b08      	cmp	r3, #8
 8002a9a:	d00d      	beq.n	8002ab8 <HAL_RCC_GetSysClockFreq+0x40>
 8002a9c:	2b08      	cmp	r3, #8
 8002a9e:	f200 80e1 	bhi.w	8002c64 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d002      	beq.n	8002aac <HAL_RCC_GetSysClockFreq+0x34>
 8002aa6:	2b04      	cmp	r3, #4
 8002aa8:	d003      	beq.n	8002ab2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002aaa:	e0db      	b.n	8002c64 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002aac:	4b73      	ldr	r3, [pc, #460]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x204>)
 8002aae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002ab0:	e0db      	b.n	8002c6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ab2:	4b73      	ldr	r3, [pc, #460]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x208>)
 8002ab4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ab6:	e0d8      	b.n	8002c6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ab8:	4b6f      	ldr	r3, [pc, #444]	; (8002c78 <HAL_RCC_GetSysClockFreq+0x200>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ac0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ac2:	4b6d      	ldr	r3, [pc, #436]	; (8002c78 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d063      	beq.n	8002b96 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ace:	4b6a      	ldr	r3, [pc, #424]	; (8002c78 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	099b      	lsrs	r3, r3, #6
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ad8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002adc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ae0:	633b      	str	r3, [r7, #48]	; 0x30
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	637b      	str	r3, [r7, #52]	; 0x34
 8002ae6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002aea:	4622      	mov	r2, r4
 8002aec:	462b      	mov	r3, r5
 8002aee:	f04f 0000 	mov.w	r0, #0
 8002af2:	f04f 0100 	mov.w	r1, #0
 8002af6:	0159      	lsls	r1, r3, #5
 8002af8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002afc:	0150      	lsls	r0, r2, #5
 8002afe:	4602      	mov	r2, r0
 8002b00:	460b      	mov	r3, r1
 8002b02:	4621      	mov	r1, r4
 8002b04:	1a51      	subs	r1, r2, r1
 8002b06:	6139      	str	r1, [r7, #16]
 8002b08:	4629      	mov	r1, r5
 8002b0a:	eb63 0301 	sbc.w	r3, r3, r1
 8002b0e:	617b      	str	r3, [r7, #20]
 8002b10:	f04f 0200 	mov.w	r2, #0
 8002b14:	f04f 0300 	mov.w	r3, #0
 8002b18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b1c:	4659      	mov	r1, fp
 8002b1e:	018b      	lsls	r3, r1, #6
 8002b20:	4651      	mov	r1, sl
 8002b22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b26:	4651      	mov	r1, sl
 8002b28:	018a      	lsls	r2, r1, #6
 8002b2a:	4651      	mov	r1, sl
 8002b2c:	ebb2 0801 	subs.w	r8, r2, r1
 8002b30:	4659      	mov	r1, fp
 8002b32:	eb63 0901 	sbc.w	r9, r3, r1
 8002b36:	f04f 0200 	mov.w	r2, #0
 8002b3a:	f04f 0300 	mov.w	r3, #0
 8002b3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b4a:	4690      	mov	r8, r2
 8002b4c:	4699      	mov	r9, r3
 8002b4e:	4623      	mov	r3, r4
 8002b50:	eb18 0303 	adds.w	r3, r8, r3
 8002b54:	60bb      	str	r3, [r7, #8]
 8002b56:	462b      	mov	r3, r5
 8002b58:	eb49 0303 	adc.w	r3, r9, r3
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	f04f 0200 	mov.w	r2, #0
 8002b62:	f04f 0300 	mov.w	r3, #0
 8002b66:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b6a:	4629      	mov	r1, r5
 8002b6c:	024b      	lsls	r3, r1, #9
 8002b6e:	4621      	mov	r1, r4
 8002b70:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b74:	4621      	mov	r1, r4
 8002b76:	024a      	lsls	r2, r1, #9
 8002b78:	4610      	mov	r0, r2
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b7e:	2200      	movs	r2, #0
 8002b80:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b88:	f7fd fb26 	bl	80001d8 <__aeabi_uldivmod>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	460b      	mov	r3, r1
 8002b90:	4613      	mov	r3, r2
 8002b92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b94:	e058      	b.n	8002c48 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b96:	4b38      	ldr	r3, [pc, #224]	; (8002c78 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	099b      	lsrs	r3, r3, #6
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	4611      	mov	r1, r2
 8002ba2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ba6:	623b      	str	r3, [r7, #32]
 8002ba8:	2300      	movs	r3, #0
 8002baa:	627b      	str	r3, [r7, #36]	; 0x24
 8002bac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002bb0:	4642      	mov	r2, r8
 8002bb2:	464b      	mov	r3, r9
 8002bb4:	f04f 0000 	mov.w	r0, #0
 8002bb8:	f04f 0100 	mov.w	r1, #0
 8002bbc:	0159      	lsls	r1, r3, #5
 8002bbe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bc2:	0150      	lsls	r0, r2, #5
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	4641      	mov	r1, r8
 8002bca:	ebb2 0a01 	subs.w	sl, r2, r1
 8002bce:	4649      	mov	r1, r9
 8002bd0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002bd4:	f04f 0200 	mov.w	r2, #0
 8002bd8:	f04f 0300 	mov.w	r3, #0
 8002bdc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002be0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002be4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002be8:	ebb2 040a 	subs.w	r4, r2, sl
 8002bec:	eb63 050b 	sbc.w	r5, r3, fp
 8002bf0:	f04f 0200 	mov.w	r2, #0
 8002bf4:	f04f 0300 	mov.w	r3, #0
 8002bf8:	00eb      	lsls	r3, r5, #3
 8002bfa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bfe:	00e2      	lsls	r2, r4, #3
 8002c00:	4614      	mov	r4, r2
 8002c02:	461d      	mov	r5, r3
 8002c04:	4643      	mov	r3, r8
 8002c06:	18e3      	adds	r3, r4, r3
 8002c08:	603b      	str	r3, [r7, #0]
 8002c0a:	464b      	mov	r3, r9
 8002c0c:	eb45 0303 	adc.w	r3, r5, r3
 8002c10:	607b      	str	r3, [r7, #4]
 8002c12:	f04f 0200 	mov.w	r2, #0
 8002c16:	f04f 0300 	mov.w	r3, #0
 8002c1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c1e:	4629      	mov	r1, r5
 8002c20:	028b      	lsls	r3, r1, #10
 8002c22:	4621      	mov	r1, r4
 8002c24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c28:	4621      	mov	r1, r4
 8002c2a:	028a      	lsls	r2, r1, #10
 8002c2c:	4610      	mov	r0, r2
 8002c2e:	4619      	mov	r1, r3
 8002c30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c32:	2200      	movs	r2, #0
 8002c34:	61bb      	str	r3, [r7, #24]
 8002c36:	61fa      	str	r2, [r7, #28]
 8002c38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c3c:	f7fd facc 	bl	80001d8 <__aeabi_uldivmod>
 8002c40:	4602      	mov	r2, r0
 8002c42:	460b      	mov	r3, r1
 8002c44:	4613      	mov	r3, r2
 8002c46:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c48:	4b0b      	ldr	r3, [pc, #44]	; (8002c78 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	0c1b      	lsrs	r3, r3, #16
 8002c4e:	f003 0303 	and.w	r3, r3, #3
 8002c52:	3301      	adds	r3, #1
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002c58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c62:	e002      	b.n	8002c6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c64:	4b05      	ldr	r3, [pc, #20]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x204>)
 8002c66:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3750      	adds	r7, #80	; 0x50
 8002c70:	46bd      	mov	sp, r7
 8002c72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c76:	bf00      	nop
 8002c78:	40023800 	.word	0x40023800
 8002c7c:	00f42400 	.word	0x00f42400
 8002c80:	007a1200 	.word	0x007a1200

08002c84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e041      	b.n	8002d1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d106      	bne.n	8002cb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f7fd fff6 	bl	8000c9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3304      	adds	r3, #4
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	4610      	mov	r0, r2
 8002cc4:	f000 fc82 	bl	80035cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
	...

08002d24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d001      	beq.n	8002d3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e044      	b.n	8002dc6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2202      	movs	r2, #2
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68da      	ldr	r2, [r3, #12]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f042 0201 	orr.w	r2, r2, #1
 8002d52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a1e      	ldr	r2, [pc, #120]	; (8002dd4 <HAL_TIM_Base_Start_IT+0xb0>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d018      	beq.n	8002d90 <HAL_TIM_Base_Start_IT+0x6c>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d66:	d013      	beq.n	8002d90 <HAL_TIM_Base_Start_IT+0x6c>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a1a      	ldr	r2, [pc, #104]	; (8002dd8 <HAL_TIM_Base_Start_IT+0xb4>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d00e      	beq.n	8002d90 <HAL_TIM_Base_Start_IT+0x6c>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a19      	ldr	r2, [pc, #100]	; (8002ddc <HAL_TIM_Base_Start_IT+0xb8>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d009      	beq.n	8002d90 <HAL_TIM_Base_Start_IT+0x6c>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a17      	ldr	r2, [pc, #92]	; (8002de0 <HAL_TIM_Base_Start_IT+0xbc>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d004      	beq.n	8002d90 <HAL_TIM_Base_Start_IT+0x6c>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a16      	ldr	r2, [pc, #88]	; (8002de4 <HAL_TIM_Base_Start_IT+0xc0>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d111      	bne.n	8002db4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f003 0307 	and.w	r3, r3, #7
 8002d9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2b06      	cmp	r3, #6
 8002da0:	d010      	beq.n	8002dc4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f042 0201 	orr.w	r2, r2, #1
 8002db0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002db2:	e007      	b.n	8002dc4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f042 0201 	orr.w	r2, r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3714      	adds	r7, #20
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	40010000 	.word	0x40010000
 8002dd8:	40000400 	.word	0x40000400
 8002ddc:	40000800 	.word	0x40000800
 8002de0:	40000c00 	.word	0x40000c00
 8002de4:	40014000 	.word	0x40014000

08002de8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68da      	ldr	r2, [r3, #12]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f022 0201 	bic.w	r2, r2, #1
 8002dfe:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6a1a      	ldr	r2, [r3, #32]
 8002e06:	f241 1311 	movw	r3, #4369	; 0x1111
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10f      	bne.n	8002e30 <HAL_TIM_Base_Stop_IT+0x48>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6a1a      	ldr	r2, [r3, #32]
 8002e16:	f240 4344 	movw	r3, #1092	; 0x444
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d107      	bne.n	8002e30 <HAL_TIM_Base_Stop_IT+0x48>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 0201 	bic.w	r2, r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b082      	sub	sp, #8
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d101      	bne.n	8002e58 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e041      	b.n	8002edc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d106      	bne.n	8002e72 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 f839 	bl	8002ee4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2202      	movs	r2, #2
 8002e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	3304      	adds	r3, #4
 8002e82:	4619      	mov	r1, r3
 8002e84:	4610      	mov	r0, r2
 8002e86:	f000 fba1 	bl	80035cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d109      	bne.n	8002f1c <HAL_TIM_PWM_Start+0x24>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	bf14      	ite	ne
 8002f14:	2301      	movne	r3, #1
 8002f16:	2300      	moveq	r3, #0
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	e022      	b.n	8002f62 <HAL_TIM_PWM_Start+0x6a>
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	d109      	bne.n	8002f36 <HAL_TIM_PWM_Start+0x3e>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	bf14      	ite	ne
 8002f2e:	2301      	movne	r3, #1
 8002f30:	2300      	moveq	r3, #0
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	e015      	b.n	8002f62 <HAL_TIM_PWM_Start+0x6a>
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	2b08      	cmp	r3, #8
 8002f3a:	d109      	bne.n	8002f50 <HAL_TIM_PWM_Start+0x58>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	bf14      	ite	ne
 8002f48:	2301      	movne	r3, #1
 8002f4a:	2300      	moveq	r3, #0
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	e008      	b.n	8002f62 <HAL_TIM_PWM_Start+0x6a>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	bf14      	ite	ne
 8002f5c:	2301      	movne	r3, #1
 8002f5e:	2300      	moveq	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e068      	b.n	800303c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d104      	bne.n	8002f7a <HAL_TIM_PWM_Start+0x82>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2202      	movs	r2, #2
 8002f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f78:	e013      	b.n	8002fa2 <HAL_TIM_PWM_Start+0xaa>
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	2b04      	cmp	r3, #4
 8002f7e:	d104      	bne.n	8002f8a <HAL_TIM_PWM_Start+0x92>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2202      	movs	r2, #2
 8002f84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f88:	e00b      	b.n	8002fa2 <HAL_TIM_PWM_Start+0xaa>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	2b08      	cmp	r3, #8
 8002f8e:	d104      	bne.n	8002f9a <HAL_TIM_PWM_Start+0xa2>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2202      	movs	r2, #2
 8002f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f98:	e003      	b.n	8002fa2 <HAL_TIM_PWM_Start+0xaa>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2202      	movs	r2, #2
 8002f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	6839      	ldr	r1, [r7, #0]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 fdb4 	bl	8003b18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a23      	ldr	r2, [pc, #140]	; (8003044 <HAL_TIM_PWM_Start+0x14c>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d107      	bne.n	8002fca <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fc8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a1d      	ldr	r2, [pc, #116]	; (8003044 <HAL_TIM_PWM_Start+0x14c>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d018      	beq.n	8003006 <HAL_TIM_PWM_Start+0x10e>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fdc:	d013      	beq.n	8003006 <HAL_TIM_PWM_Start+0x10e>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a19      	ldr	r2, [pc, #100]	; (8003048 <HAL_TIM_PWM_Start+0x150>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d00e      	beq.n	8003006 <HAL_TIM_PWM_Start+0x10e>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a17      	ldr	r2, [pc, #92]	; (800304c <HAL_TIM_PWM_Start+0x154>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d009      	beq.n	8003006 <HAL_TIM_PWM_Start+0x10e>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a16      	ldr	r2, [pc, #88]	; (8003050 <HAL_TIM_PWM_Start+0x158>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d004      	beq.n	8003006 <HAL_TIM_PWM_Start+0x10e>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a14      	ldr	r2, [pc, #80]	; (8003054 <HAL_TIM_PWM_Start+0x15c>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d111      	bne.n	800302a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f003 0307 	and.w	r3, r3, #7
 8003010:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2b06      	cmp	r3, #6
 8003016:	d010      	beq.n	800303a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f042 0201 	orr.w	r2, r2, #1
 8003026:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003028:	e007      	b.n	800303a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f042 0201 	orr.w	r2, r2, #1
 8003038:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	3710      	adds	r7, #16
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	40010000 	.word	0x40010000
 8003048:	40000400 	.word	0x40000400
 800304c:	40000800 	.word	0x40000800
 8003050:	40000c00 	.word	0x40000c00
 8003054:	40014000 	.word	0x40014000

08003058 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b02      	cmp	r3, #2
 800306c:	d122      	bne.n	80030b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b02      	cmp	r3, #2
 800307a:	d11b      	bne.n	80030b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f06f 0202 	mvn.w	r2, #2
 8003084:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2201      	movs	r2, #1
 800308a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	f003 0303 	and.w	r3, r3, #3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 fa77 	bl	800358e <HAL_TIM_IC_CaptureCallback>
 80030a0:	e005      	b.n	80030ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 fa69 	bl	800357a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 fa7a 	bl	80035a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	f003 0304 	and.w	r3, r3, #4
 80030be:	2b04      	cmp	r3, #4
 80030c0:	d122      	bne.n	8003108 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	2b04      	cmp	r3, #4
 80030ce:	d11b      	bne.n	8003108 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f06f 0204 	mvn.w	r2, #4
 80030d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2202      	movs	r2, #2
 80030de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d003      	beq.n	80030f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 fa4d 	bl	800358e <HAL_TIM_IC_CaptureCallback>
 80030f4:	e005      	b.n	8003102 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 fa3f 	bl	800357a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 fa50 	bl	80035a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	f003 0308 	and.w	r3, r3, #8
 8003112:	2b08      	cmp	r3, #8
 8003114:	d122      	bne.n	800315c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	f003 0308 	and.w	r3, r3, #8
 8003120:	2b08      	cmp	r3, #8
 8003122:	d11b      	bne.n	800315c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f06f 0208 	mvn.w	r2, #8
 800312c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2204      	movs	r2, #4
 8003132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	f003 0303 	and.w	r3, r3, #3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d003      	beq.n	800314a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 fa23 	bl	800358e <HAL_TIM_IC_CaptureCallback>
 8003148:	e005      	b.n	8003156 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 fa15 	bl	800357a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f000 fa26 	bl	80035a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	f003 0310 	and.w	r3, r3, #16
 8003166:	2b10      	cmp	r3, #16
 8003168:	d122      	bne.n	80031b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	f003 0310 	and.w	r3, r3, #16
 8003174:	2b10      	cmp	r3, #16
 8003176:	d11b      	bne.n	80031b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f06f 0210 	mvn.w	r2, #16
 8003180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2208      	movs	r2, #8
 8003186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 f9f9 	bl	800358e <HAL_TIM_IC_CaptureCallback>
 800319c:	e005      	b.n	80031aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f9eb 	bl	800357a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 f9fc 	bl	80035a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d10e      	bne.n	80031dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d107      	bne.n	80031dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f06f 0201 	mvn.w	r2, #1
 80031d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f7fd f9a4 	bl	8000524 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e6:	2b80      	cmp	r3, #128	; 0x80
 80031e8:	d10e      	bne.n	8003208 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f4:	2b80      	cmp	r3, #128	; 0x80
 80031f6:	d107      	bne.n	8003208 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 fd26 	bl	8003c54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003212:	2b40      	cmp	r3, #64	; 0x40
 8003214:	d10e      	bne.n	8003234 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003220:	2b40      	cmp	r3, #64	; 0x40
 8003222:	d107      	bne.n	8003234 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800322c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 f9c1 	bl	80035b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	f003 0320 	and.w	r3, r3, #32
 800323e:	2b20      	cmp	r3, #32
 8003240:	d10e      	bne.n	8003260 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	f003 0320 	and.w	r3, r3, #32
 800324c:	2b20      	cmp	r3, #32
 800324e:	d107      	bne.n	8003260 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f06f 0220 	mvn.w	r2, #32
 8003258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 fcf0 	bl	8003c40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003260:	bf00      	nop
 8003262:	3708      	adds	r7, #8
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b086      	sub	sp, #24
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003274:	2300      	movs	r3, #0
 8003276:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800327e:	2b01      	cmp	r3, #1
 8003280:	d101      	bne.n	8003286 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003282:	2302      	movs	r3, #2
 8003284:	e0ae      	b.n	80033e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2b0c      	cmp	r3, #12
 8003292:	f200 809f 	bhi.w	80033d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003296:	a201      	add	r2, pc, #4	; (adr r2, 800329c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800329c:	080032d1 	.word	0x080032d1
 80032a0:	080033d5 	.word	0x080033d5
 80032a4:	080033d5 	.word	0x080033d5
 80032a8:	080033d5 	.word	0x080033d5
 80032ac:	08003311 	.word	0x08003311
 80032b0:	080033d5 	.word	0x080033d5
 80032b4:	080033d5 	.word	0x080033d5
 80032b8:	080033d5 	.word	0x080033d5
 80032bc:	08003353 	.word	0x08003353
 80032c0:	080033d5 	.word	0x080033d5
 80032c4:	080033d5 	.word	0x080033d5
 80032c8:	080033d5 	.word	0x080033d5
 80032cc:	08003393 	.word	0x08003393
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68b9      	ldr	r1, [r7, #8]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 f9f8 	bl	80036cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	699a      	ldr	r2, [r3, #24]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f042 0208 	orr.w	r2, r2, #8
 80032ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	699a      	ldr	r2, [r3, #24]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 0204 	bic.w	r2, r2, #4
 80032fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6999      	ldr	r1, [r3, #24]
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	691a      	ldr	r2, [r3, #16]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	430a      	orrs	r2, r1
 800330c:	619a      	str	r2, [r3, #24]
      break;
 800330e:	e064      	b.n	80033da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68b9      	ldr	r1, [r7, #8]
 8003316:	4618      	mov	r0, r3
 8003318:	f000 fa3e 	bl	8003798 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	699a      	ldr	r2, [r3, #24]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800332a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	699a      	ldr	r2, [r3, #24]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800333a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6999      	ldr	r1, [r3, #24]
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	021a      	lsls	r2, r3, #8
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	430a      	orrs	r2, r1
 800334e:	619a      	str	r2, [r3, #24]
      break;
 8003350:	e043      	b.n	80033da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68b9      	ldr	r1, [r7, #8]
 8003358:	4618      	mov	r0, r3
 800335a:	f000 fa89 	bl	8003870 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	69da      	ldr	r2, [r3, #28]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f042 0208 	orr.w	r2, r2, #8
 800336c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	69da      	ldr	r2, [r3, #28]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 0204 	bic.w	r2, r2, #4
 800337c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	69d9      	ldr	r1, [r3, #28]
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	691a      	ldr	r2, [r3, #16]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	430a      	orrs	r2, r1
 800338e:	61da      	str	r2, [r3, #28]
      break;
 8003390:	e023      	b.n	80033da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68b9      	ldr	r1, [r7, #8]
 8003398:	4618      	mov	r0, r3
 800339a:	f000 fad3 	bl	8003944 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	69da      	ldr	r2, [r3, #28]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	69da      	ldr	r2, [r3, #28]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	69d9      	ldr	r1, [r3, #28]
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	021a      	lsls	r2, r3, #8
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	61da      	str	r2, [r3, #28]
      break;
 80033d2:	e002      	b.n	80033da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	75fb      	strb	r3, [r7, #23]
      break;
 80033d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3718      	adds	r7, #24
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033f6:	2300      	movs	r3, #0
 80033f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003400:	2b01      	cmp	r3, #1
 8003402:	d101      	bne.n	8003408 <HAL_TIM_ConfigClockSource+0x1c>
 8003404:	2302      	movs	r3, #2
 8003406:	e0b4      	b.n	8003572 <HAL_TIM_ConfigClockSource+0x186>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2202      	movs	r2, #2
 8003414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003426:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800342e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68ba      	ldr	r2, [r7, #8]
 8003436:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003440:	d03e      	beq.n	80034c0 <HAL_TIM_ConfigClockSource+0xd4>
 8003442:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003446:	f200 8087 	bhi.w	8003558 <HAL_TIM_ConfigClockSource+0x16c>
 800344a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800344e:	f000 8086 	beq.w	800355e <HAL_TIM_ConfigClockSource+0x172>
 8003452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003456:	d87f      	bhi.n	8003558 <HAL_TIM_ConfigClockSource+0x16c>
 8003458:	2b70      	cmp	r3, #112	; 0x70
 800345a:	d01a      	beq.n	8003492 <HAL_TIM_ConfigClockSource+0xa6>
 800345c:	2b70      	cmp	r3, #112	; 0x70
 800345e:	d87b      	bhi.n	8003558 <HAL_TIM_ConfigClockSource+0x16c>
 8003460:	2b60      	cmp	r3, #96	; 0x60
 8003462:	d050      	beq.n	8003506 <HAL_TIM_ConfigClockSource+0x11a>
 8003464:	2b60      	cmp	r3, #96	; 0x60
 8003466:	d877      	bhi.n	8003558 <HAL_TIM_ConfigClockSource+0x16c>
 8003468:	2b50      	cmp	r3, #80	; 0x50
 800346a:	d03c      	beq.n	80034e6 <HAL_TIM_ConfigClockSource+0xfa>
 800346c:	2b50      	cmp	r3, #80	; 0x50
 800346e:	d873      	bhi.n	8003558 <HAL_TIM_ConfigClockSource+0x16c>
 8003470:	2b40      	cmp	r3, #64	; 0x40
 8003472:	d058      	beq.n	8003526 <HAL_TIM_ConfigClockSource+0x13a>
 8003474:	2b40      	cmp	r3, #64	; 0x40
 8003476:	d86f      	bhi.n	8003558 <HAL_TIM_ConfigClockSource+0x16c>
 8003478:	2b30      	cmp	r3, #48	; 0x30
 800347a:	d064      	beq.n	8003546 <HAL_TIM_ConfigClockSource+0x15a>
 800347c:	2b30      	cmp	r3, #48	; 0x30
 800347e:	d86b      	bhi.n	8003558 <HAL_TIM_ConfigClockSource+0x16c>
 8003480:	2b20      	cmp	r3, #32
 8003482:	d060      	beq.n	8003546 <HAL_TIM_ConfigClockSource+0x15a>
 8003484:	2b20      	cmp	r3, #32
 8003486:	d867      	bhi.n	8003558 <HAL_TIM_ConfigClockSource+0x16c>
 8003488:	2b00      	cmp	r3, #0
 800348a:	d05c      	beq.n	8003546 <HAL_TIM_ConfigClockSource+0x15a>
 800348c:	2b10      	cmp	r3, #16
 800348e:	d05a      	beq.n	8003546 <HAL_TIM_ConfigClockSource+0x15a>
 8003490:	e062      	b.n	8003558 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6818      	ldr	r0, [r3, #0]
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	6899      	ldr	r1, [r3, #8]
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	f000 fb19 	bl	8003ad8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	609a      	str	r2, [r3, #8]
      break;
 80034be:	e04f      	b.n	8003560 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6818      	ldr	r0, [r3, #0]
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	6899      	ldr	r1, [r3, #8]
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	f000 fb02 	bl	8003ad8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689a      	ldr	r2, [r3, #8]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034e2:	609a      	str	r2, [r3, #8]
      break;
 80034e4:	e03c      	b.n	8003560 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6818      	ldr	r0, [r3, #0]
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	6859      	ldr	r1, [r3, #4]
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	461a      	mov	r2, r3
 80034f4:	f000 fa76 	bl	80039e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2150      	movs	r1, #80	; 0x50
 80034fe:	4618      	mov	r0, r3
 8003500:	f000 facf 	bl	8003aa2 <TIM_ITRx_SetConfig>
      break;
 8003504:	e02c      	b.n	8003560 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6818      	ldr	r0, [r3, #0]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	6859      	ldr	r1, [r3, #4]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	461a      	mov	r2, r3
 8003514:	f000 fa95 	bl	8003a42 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2160      	movs	r1, #96	; 0x60
 800351e:	4618      	mov	r0, r3
 8003520:	f000 fabf 	bl	8003aa2 <TIM_ITRx_SetConfig>
      break;
 8003524:	e01c      	b.n	8003560 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6818      	ldr	r0, [r3, #0]
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	6859      	ldr	r1, [r3, #4]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	461a      	mov	r2, r3
 8003534:	f000 fa56 	bl	80039e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2140      	movs	r1, #64	; 0x40
 800353e:	4618      	mov	r0, r3
 8003540:	f000 faaf 	bl	8003aa2 <TIM_ITRx_SetConfig>
      break;
 8003544:	e00c      	b.n	8003560 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4619      	mov	r1, r3
 8003550:	4610      	mov	r0, r2
 8003552:	f000 faa6 	bl	8003aa2 <TIM_ITRx_SetConfig>
      break;
 8003556:	e003      	b.n	8003560 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	73fb      	strb	r3, [r7, #15]
      break;
 800355c:	e000      	b.n	8003560 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800355e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003570:	7bfb      	ldrb	r3, [r7, #15]
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800357a:	b480      	push	{r7}
 800357c:	b083      	sub	sp, #12
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800358e:	b480      	push	{r7}
 8003590:	b083      	sub	sp, #12
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003596:	bf00      	nop
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr

080035a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035a2:	b480      	push	{r7}
 80035a4:	b083      	sub	sp, #12
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035aa:	bf00      	nop
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035b6:	b480      	push	{r7}
 80035b8:	b083      	sub	sp, #12
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035be:	bf00      	nop
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
	...

080035cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a34      	ldr	r2, [pc, #208]	; (80036b0 <TIM_Base_SetConfig+0xe4>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d00f      	beq.n	8003604 <TIM_Base_SetConfig+0x38>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ea:	d00b      	beq.n	8003604 <TIM_Base_SetConfig+0x38>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a31      	ldr	r2, [pc, #196]	; (80036b4 <TIM_Base_SetConfig+0xe8>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d007      	beq.n	8003604 <TIM_Base_SetConfig+0x38>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a30      	ldr	r2, [pc, #192]	; (80036b8 <TIM_Base_SetConfig+0xec>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d003      	beq.n	8003604 <TIM_Base_SetConfig+0x38>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a2f      	ldr	r2, [pc, #188]	; (80036bc <TIM_Base_SetConfig+0xf0>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d108      	bne.n	8003616 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800360a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	4313      	orrs	r3, r2
 8003614:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a25      	ldr	r2, [pc, #148]	; (80036b0 <TIM_Base_SetConfig+0xe4>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d01b      	beq.n	8003656 <TIM_Base_SetConfig+0x8a>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003624:	d017      	beq.n	8003656 <TIM_Base_SetConfig+0x8a>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a22      	ldr	r2, [pc, #136]	; (80036b4 <TIM_Base_SetConfig+0xe8>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d013      	beq.n	8003656 <TIM_Base_SetConfig+0x8a>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a21      	ldr	r2, [pc, #132]	; (80036b8 <TIM_Base_SetConfig+0xec>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d00f      	beq.n	8003656 <TIM_Base_SetConfig+0x8a>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a20      	ldr	r2, [pc, #128]	; (80036bc <TIM_Base_SetConfig+0xf0>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d00b      	beq.n	8003656 <TIM_Base_SetConfig+0x8a>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a1f      	ldr	r2, [pc, #124]	; (80036c0 <TIM_Base_SetConfig+0xf4>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d007      	beq.n	8003656 <TIM_Base_SetConfig+0x8a>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a1e      	ldr	r2, [pc, #120]	; (80036c4 <TIM_Base_SetConfig+0xf8>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d003      	beq.n	8003656 <TIM_Base_SetConfig+0x8a>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a1d      	ldr	r2, [pc, #116]	; (80036c8 <TIM_Base_SetConfig+0xfc>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d108      	bne.n	8003668 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800365c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	4313      	orrs	r3, r2
 8003666:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	4313      	orrs	r3, r2
 8003674:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a08      	ldr	r2, [pc, #32]	; (80036b0 <TIM_Base_SetConfig+0xe4>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d103      	bne.n	800369c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	691a      	ldr	r2, [r3, #16]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	615a      	str	r2, [r3, #20]
}
 80036a2:	bf00      	nop
 80036a4:	3714      	adds	r7, #20
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	40010000 	.word	0x40010000
 80036b4:	40000400 	.word	0x40000400
 80036b8:	40000800 	.word	0x40000800
 80036bc:	40000c00 	.word	0x40000c00
 80036c0:	40014000 	.word	0x40014000
 80036c4:	40014400 	.word	0x40014400
 80036c8:	40014800 	.word	0x40014800

080036cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b087      	sub	sp, #28
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a1b      	ldr	r3, [r3, #32]
 80036da:	f023 0201 	bic.w	r2, r3, #1
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f023 0303 	bic.w	r3, r3, #3
 8003702:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	4313      	orrs	r3, r2
 800370c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	f023 0302 	bic.w	r3, r3, #2
 8003714:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	4313      	orrs	r3, r2
 800371e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a1c      	ldr	r2, [pc, #112]	; (8003794 <TIM_OC1_SetConfig+0xc8>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d10c      	bne.n	8003742 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	f023 0308 	bic.w	r3, r3, #8
 800372e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	4313      	orrs	r3, r2
 8003738:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	f023 0304 	bic.w	r3, r3, #4
 8003740:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a13      	ldr	r2, [pc, #76]	; (8003794 <TIM_OC1_SetConfig+0xc8>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d111      	bne.n	800376e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003750:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003758:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	4313      	orrs	r3, r2
 8003762:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	4313      	orrs	r3, r2
 800376c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	621a      	str	r2, [r3, #32]
}
 8003788:	bf00      	nop
 800378a:	371c      	adds	r7, #28
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr
 8003794:	40010000 	.word	0x40010000

08003798 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003798:	b480      	push	{r7}
 800379a:	b087      	sub	sp, #28
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	f023 0210 	bic.w	r2, r3, #16
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	021b      	lsls	r3, r3, #8
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	4313      	orrs	r3, r2
 80037da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	f023 0320 	bic.w	r3, r3, #32
 80037e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	011b      	lsls	r3, r3, #4
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a1e      	ldr	r2, [pc, #120]	; (800386c <TIM_OC2_SetConfig+0xd4>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d10d      	bne.n	8003814 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	011b      	lsls	r3, r3, #4
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	4313      	orrs	r3, r2
 800380a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003812:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a15      	ldr	r2, [pc, #84]	; (800386c <TIM_OC2_SetConfig+0xd4>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d113      	bne.n	8003844 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003822:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800382a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	4313      	orrs	r3, r2
 8003836:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	4313      	orrs	r3, r2
 8003842:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685a      	ldr	r2, [r3, #4]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	621a      	str	r2, [r3, #32]
}
 800385e:	bf00      	nop
 8003860:	371c      	adds	r7, #28
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	40010000 	.word	0x40010000

08003870 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003870:	b480      	push	{r7}
 8003872:	b087      	sub	sp, #28
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	69db      	ldr	r3, [r3, #28]
 8003896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800389e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f023 0303 	bic.w	r3, r3, #3
 80038a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	021b      	lsls	r3, r3, #8
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a1d      	ldr	r2, [pc, #116]	; (8003940 <TIM_OC3_SetConfig+0xd0>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d10d      	bne.n	80038ea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	021b      	lsls	r3, r3, #8
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	4313      	orrs	r3, r2
 80038e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a14      	ldr	r2, [pc, #80]	; (8003940 <TIM_OC3_SetConfig+0xd0>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d113      	bne.n	800391a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003900:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	011b      	lsls	r3, r3, #4
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	4313      	orrs	r3, r2
 800390c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	011b      	lsls	r3, r3, #4
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	4313      	orrs	r3, r2
 8003918:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	697a      	ldr	r2, [r7, #20]
 8003932:	621a      	str	r2, [r3, #32]
}
 8003934:	bf00      	nop
 8003936:	371c      	adds	r7, #28
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	40010000 	.word	0x40010000

08003944 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003944:	b480      	push	{r7}
 8003946:	b087      	sub	sp, #28
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	69db      	ldr	r3, [r3, #28]
 800396a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800397a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	021b      	lsls	r3, r3, #8
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	4313      	orrs	r3, r2
 8003986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800398e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	031b      	lsls	r3, r3, #12
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	4313      	orrs	r3, r2
 800399a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a10      	ldr	r2, [pc, #64]	; (80039e0 <TIM_OC4_SetConfig+0x9c>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d109      	bne.n	80039b8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	695b      	ldr	r3, [r3, #20]
 80039b0:	019b      	lsls	r3, r3, #6
 80039b2:	697a      	ldr	r2, [r7, #20]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	621a      	str	r2, [r3, #32]
}
 80039d2:	bf00      	nop
 80039d4:	371c      	adds	r7, #28
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	40010000 	.word	0x40010000

080039e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b087      	sub	sp, #28
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	f023 0201 	bic.w	r2, r3, #1
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	011b      	lsls	r3, r3, #4
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	f023 030a 	bic.w	r3, r3, #10
 8003a20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	693a      	ldr	r2, [r7, #16]
 8003a2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	621a      	str	r2, [r3, #32]
}
 8003a36:	bf00      	nop
 8003a38:	371c      	adds	r7, #28
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr

08003a42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a42:	b480      	push	{r7}
 8003a44:	b087      	sub	sp, #28
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	60f8      	str	r0, [r7, #12]
 8003a4a:	60b9      	str	r1, [r7, #8]
 8003a4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	f023 0210 	bic.w	r2, r3, #16
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	031b      	lsls	r3, r3, #12
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	011b      	lsls	r3, r3, #4
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	621a      	str	r2, [r3, #32]
}
 8003a96:	bf00      	nop
 8003a98:	371c      	adds	r7, #28
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr

08003aa2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	b085      	sub	sp, #20
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
 8003aaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ab8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	f043 0307 	orr.w	r3, r3, #7
 8003ac4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	609a      	str	r2, [r3, #8]
}
 8003acc:	bf00      	nop
 8003ace:	3714      	adds	r7, #20
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b087      	sub	sp, #28
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
 8003ae4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003af2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	021a      	lsls	r2, r3, #8
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	431a      	orrs	r2, r3
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	609a      	str	r2, [r3, #8]
}
 8003b0c:	bf00      	nop
 8003b0e:	371c      	adds	r7, #28
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b087      	sub	sp, #28
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	f003 031f 	and.w	r3, r3, #31
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6a1a      	ldr	r2, [r3, #32]
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	43db      	mvns	r3, r3
 8003b3a:	401a      	ands	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6a1a      	ldr	r2, [r3, #32]
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	f003 031f 	and.w	r3, r3, #31
 8003b4a:	6879      	ldr	r1, [r7, #4]
 8003b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b50:	431a      	orrs	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	621a      	str	r2, [r3, #32]
}
 8003b56:	bf00      	nop
 8003b58:	371c      	adds	r7, #28
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
	...

08003b64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d101      	bne.n	8003b7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b78:	2302      	movs	r3, #2
 8003b7a:	e050      	b.n	8003c1e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2202      	movs	r2, #2
 8003b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ba2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a1c      	ldr	r2, [pc, #112]	; (8003c2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d018      	beq.n	8003bf2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc8:	d013      	beq.n	8003bf2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a18      	ldr	r2, [pc, #96]	; (8003c30 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d00e      	beq.n	8003bf2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a16      	ldr	r2, [pc, #88]	; (8003c34 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d009      	beq.n	8003bf2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a15      	ldr	r2, [pc, #84]	; (8003c38 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d004      	beq.n	8003bf2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a13      	ldr	r2, [pc, #76]	; (8003c3c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d10c      	bne.n	8003c0c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bf8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68ba      	ldr	r2, [r7, #8]
 8003c0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3714      	adds	r7, #20
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	40010000 	.word	0x40010000
 8003c30:	40000400 	.word	0x40000400
 8003c34:	40000800 	.word	0x40000800
 8003c38:	40000c00 	.word	0x40000c00
 8003c3c:	40014000 	.word	0x40014000

08003c40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <__libc_init_array>:
 8003c68:	b570      	push	{r4, r5, r6, lr}
 8003c6a:	4d0d      	ldr	r5, [pc, #52]	; (8003ca0 <__libc_init_array+0x38>)
 8003c6c:	4c0d      	ldr	r4, [pc, #52]	; (8003ca4 <__libc_init_array+0x3c>)
 8003c6e:	1b64      	subs	r4, r4, r5
 8003c70:	10a4      	asrs	r4, r4, #2
 8003c72:	2600      	movs	r6, #0
 8003c74:	42a6      	cmp	r6, r4
 8003c76:	d109      	bne.n	8003c8c <__libc_init_array+0x24>
 8003c78:	4d0b      	ldr	r5, [pc, #44]	; (8003ca8 <__libc_init_array+0x40>)
 8003c7a:	4c0c      	ldr	r4, [pc, #48]	; (8003cac <__libc_init_array+0x44>)
 8003c7c:	f000 f820 	bl	8003cc0 <_init>
 8003c80:	1b64      	subs	r4, r4, r5
 8003c82:	10a4      	asrs	r4, r4, #2
 8003c84:	2600      	movs	r6, #0
 8003c86:	42a6      	cmp	r6, r4
 8003c88:	d105      	bne.n	8003c96 <__libc_init_array+0x2e>
 8003c8a:	bd70      	pop	{r4, r5, r6, pc}
 8003c8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c90:	4798      	blx	r3
 8003c92:	3601      	adds	r6, #1
 8003c94:	e7ee      	b.n	8003c74 <__libc_init_array+0xc>
 8003c96:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c9a:	4798      	blx	r3
 8003c9c:	3601      	adds	r6, #1
 8003c9e:	e7f2      	b.n	8003c86 <__libc_init_array+0x1e>
 8003ca0:	08003cf8 	.word	0x08003cf8
 8003ca4:	08003cf8 	.word	0x08003cf8
 8003ca8:	08003cf8 	.word	0x08003cf8
 8003cac:	08003cfc 	.word	0x08003cfc

08003cb0 <memset>:
 8003cb0:	4402      	add	r2, r0
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d100      	bne.n	8003cba <memset+0xa>
 8003cb8:	4770      	bx	lr
 8003cba:	f803 1b01 	strb.w	r1, [r3], #1
 8003cbe:	e7f9      	b.n	8003cb4 <memset+0x4>

08003cc0 <_init>:
 8003cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cc2:	bf00      	nop
 8003cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cc6:	bc08      	pop	{r3}
 8003cc8:	469e      	mov	lr, r3
 8003cca:	4770      	bx	lr

08003ccc <_fini>:
 8003ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cce:	bf00      	nop
 8003cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cd2:	bc08      	pop	{r3}
 8003cd4:	469e      	mov	lr, r3
 8003cd6:	4770      	bx	lr
